// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BitData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_BitData_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_BitData_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "ExecutionProtos.pb.h"
#include "Coordination.pb.h"
#include "UserBitShared.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_BitData_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_BitData_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_BitData_2eproto;
namespace exec {
namespace bit {
namespace data {
class AckWithCredit;
struct AckWithCreditDefaultTypeInternal;
extern AckWithCreditDefaultTypeInternal _AckWithCredit_default_instance_;
class BitClientHandshake;
struct BitClientHandshakeDefaultTypeInternal;
extern BitClientHandshakeDefaultTypeInternal _BitClientHandshake_default_instance_;
class BitServerHandshake;
struct BitServerHandshakeDefaultTypeInternal;
extern BitServerHandshakeDefaultTypeInternal _BitServerHandshake_default_instance_;
class FragmentRecordBatch;
struct FragmentRecordBatchDefaultTypeInternal;
extern FragmentRecordBatchDefaultTypeInternal _FragmentRecordBatch_default_instance_;
class RuntimeFilterBDef;
struct RuntimeFilterBDefDefaultTypeInternal;
extern RuntimeFilterBDefDefaultTypeInternal _RuntimeFilterBDef_default_instance_;
}  // namespace data
}  // namespace bit
}  // namespace exec
PROTOBUF_NAMESPACE_OPEN
template <>
::exec::bit::data::AckWithCredit* Arena::CreateMaybeMessage<::exec::bit::data::AckWithCredit>(Arena*);
template <>
::exec::bit::data::BitClientHandshake* Arena::CreateMaybeMessage<::exec::bit::data::BitClientHandshake>(Arena*);
template <>
::exec::bit::data::BitServerHandshake* Arena::CreateMaybeMessage<::exec::bit::data::BitServerHandshake>(Arena*);
template <>
::exec::bit::data::FragmentRecordBatch* Arena::CreateMaybeMessage<::exec::bit::data::FragmentRecordBatch>(Arena*);
template <>
::exec::bit::data::RuntimeFilterBDef* Arena::CreateMaybeMessage<::exec::bit::data::RuntimeFilterBDef>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace exec {
namespace bit {
namespace data {
enum RpcType : int {
  HANDSHAKE = 0,
  ACK = 1,
  GOODBYE = 2,
  REQ_RECORD_BATCH = 3,
  SASL_MESSAGE = 4,
  REQ_RUNTIME_FILTER = 5,
  DATA_ACK_WITH_CREDIT = 6,
};

bool RpcType_IsValid(int value);
constexpr RpcType RpcType_MIN = static_cast<RpcType>(0);
constexpr RpcType RpcType_MAX = static_cast<RpcType>(6);
constexpr int RpcType_ARRAYSIZE = 6 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
RpcType_descriptor();
template <typename T>
const std::string& RpcType_Name(T value) {
  static_assert(std::is_same<T, RpcType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RpcType_Name().");
  return RpcType_Name(static_cast<RpcType>(value));
}
template <>
inline const std::string& RpcType_Name(RpcType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<RpcType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool RpcType_Parse(absl::string_view name, RpcType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RpcType>(
      RpcType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class BitClientHandshake final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exec.bit.data.BitClientHandshake) */ {
 public:
  inline BitClientHandshake() : BitClientHandshake(nullptr) {}
  ~BitClientHandshake() override;
  explicit PROTOBUF_CONSTEXPR BitClientHandshake(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BitClientHandshake(const BitClientHandshake& from);
  BitClientHandshake(BitClientHandshake&& from) noexcept
    : BitClientHandshake() {
    *this = ::std::move(from);
  }

  inline BitClientHandshake& operator=(const BitClientHandshake& from) {
    CopyFrom(from);
    return *this;
  }
  inline BitClientHandshake& operator=(BitClientHandshake&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BitClientHandshake& default_instance() {
    return *internal_default_instance();
  }
  static inline const BitClientHandshake* internal_default_instance() {
    return reinterpret_cast<const BitClientHandshake*>(
               &_BitClientHandshake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BitClientHandshake& a, BitClientHandshake& b) {
    a.Swap(&b);
  }
  inline void Swap(BitClientHandshake* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BitClientHandshake* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BitClientHandshake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BitClientHandshake>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BitClientHandshake& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BitClientHandshake& from) {
    BitClientHandshake::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BitClientHandshake* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "exec.bit.data.BitClientHandshake";
  }
  protected:
  explicit BitClientHandshake(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRpcVersionFieldNumber = 1,
    kChannelFieldNumber = 2,
  };
  // optional int32 rpc_version = 1;
  bool has_rpc_version() const;
  void clear_rpc_version() ;
  ::int32_t rpc_version() const;
  void set_rpc_version(::int32_t value);

  private:
  ::int32_t _internal_rpc_version() const;
  void _internal_set_rpc_version(::int32_t value);

  public:
  // optional .exec.shared.RpcChannel channel = 2 [default = BIT_DATA];
  bool has_channel() const;
  void clear_channel() ;
  ::exec::shared::RpcChannel channel() const;
  void set_channel(::exec::shared::RpcChannel value);

  private:
  ::exec::shared::RpcChannel _internal_channel() const;
  void _internal_set_channel(::exec::shared::RpcChannel value);

  public:
  // @@protoc_insertion_point(class_scope:exec.bit.data.BitClientHandshake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t rpc_version_;
    int channel_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BitData_2eproto;
};// -------------------------------------------------------------------

class BitServerHandshake final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exec.bit.data.BitServerHandshake) */ {
 public:
  inline BitServerHandshake() : BitServerHandshake(nullptr) {}
  ~BitServerHandshake() override;
  explicit PROTOBUF_CONSTEXPR BitServerHandshake(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BitServerHandshake(const BitServerHandshake& from);
  BitServerHandshake(BitServerHandshake&& from) noexcept
    : BitServerHandshake() {
    *this = ::std::move(from);
  }

  inline BitServerHandshake& operator=(const BitServerHandshake& from) {
    CopyFrom(from);
    return *this;
  }
  inline BitServerHandshake& operator=(BitServerHandshake&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BitServerHandshake& default_instance() {
    return *internal_default_instance();
  }
  static inline const BitServerHandshake* internal_default_instance() {
    return reinterpret_cast<const BitServerHandshake*>(
               &_BitServerHandshake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BitServerHandshake& a, BitServerHandshake& b) {
    a.Swap(&b);
  }
  inline void Swap(BitServerHandshake* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BitServerHandshake* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BitServerHandshake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BitServerHandshake>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BitServerHandshake& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BitServerHandshake& from) {
    BitServerHandshake::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BitServerHandshake* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "exec.bit.data.BitServerHandshake";
  }
  protected:
  explicit BitServerHandshake(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthenticationMechanismsFieldNumber = 2,
    kRpcVersionFieldNumber = 1,
  };
  // repeated string authenticationMechanisms = 2;
  int authenticationmechanisms_size() const;
  private:
  int _internal_authenticationmechanisms_size() const;

  public:
  void clear_authenticationmechanisms() ;
  const std::string& authenticationmechanisms(int index) const;
  std::string* mutable_authenticationmechanisms(int index);
  void set_authenticationmechanisms(int index, const std::string& value);
  void set_authenticationmechanisms(int index, std::string&& value);
  void set_authenticationmechanisms(int index, const char* value);
  void set_authenticationmechanisms(int index, const char* value, std::size_t size);
  void set_authenticationmechanisms(int index, absl::string_view value);
  std::string* add_authenticationmechanisms();
  void add_authenticationmechanisms(const std::string& value);
  void add_authenticationmechanisms(std::string&& value);
  void add_authenticationmechanisms(const char* value);
  void add_authenticationmechanisms(const char* value, std::size_t size);
  void add_authenticationmechanisms(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& authenticationmechanisms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_authenticationmechanisms();

  private:
  const std::string& _internal_authenticationmechanisms(int index) const;
  std::string* _internal_add_authenticationmechanisms();

  public:
  // optional int32 rpc_version = 1;
  bool has_rpc_version() const;
  void clear_rpc_version() ;
  ::int32_t rpc_version() const;
  void set_rpc_version(::int32_t value);

  private:
  ::int32_t _internal_rpc_version() const;
  void _internal_set_rpc_version(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:exec.bit.data.BitServerHandshake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> authenticationmechanisms_;
    ::int32_t rpc_version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BitData_2eproto;
};// -------------------------------------------------------------------

class FragmentRecordBatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exec.bit.data.FragmentRecordBatch) */ {
 public:
  inline FragmentRecordBatch() : FragmentRecordBatch(nullptr) {}
  ~FragmentRecordBatch() override;
  explicit PROTOBUF_CONSTEXPR FragmentRecordBatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FragmentRecordBatch(const FragmentRecordBatch& from);
  FragmentRecordBatch(FragmentRecordBatch&& from) noexcept
    : FragmentRecordBatch() {
    *this = ::std::move(from);
  }

  inline FragmentRecordBatch& operator=(const FragmentRecordBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline FragmentRecordBatch& operator=(FragmentRecordBatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FragmentRecordBatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const FragmentRecordBatch* internal_default_instance() {
    return reinterpret_cast<const FragmentRecordBatch*>(
               &_FragmentRecordBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FragmentRecordBatch& a, FragmentRecordBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(FragmentRecordBatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FragmentRecordBatch* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FragmentRecordBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FragmentRecordBatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FragmentRecordBatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FragmentRecordBatch& from) {
    FragmentRecordBatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FragmentRecordBatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "exec.bit.data.FragmentRecordBatch";
  }
  protected:
  explicit FragmentRecordBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceivingMinorFragmentIdFieldNumber = 3,
    kQueryIdFieldNumber = 1,
    kDefFieldNumber = 6,
    kReceivingMajorFragmentIdFieldNumber = 2,
    kSendingMajorFragmentIdFieldNumber = 4,
    kSendingMinorFragmentIdFieldNumber = 5,
    kIsLastBatchFieldNumber = 7,
  };
  // repeated int32 receiving_minor_fragment_id = 3;
  int receiving_minor_fragment_id_size() const;
  private:
  int _internal_receiving_minor_fragment_id_size() const;

  public:
  void clear_receiving_minor_fragment_id() ;
  ::int32_t receiving_minor_fragment_id(int index) const;
  void set_receiving_minor_fragment_id(int index, ::int32_t value);
  void add_receiving_minor_fragment_id(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& receiving_minor_fragment_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_receiving_minor_fragment_id();

  private:
  ::int32_t _internal_receiving_minor_fragment_id(int index) const;
  void _internal_add_receiving_minor_fragment_id(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_receiving_minor_fragment_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_receiving_minor_fragment_id();

  public:
  // optional .exec.shared.QueryId query_id = 1;
  bool has_query_id() const;
  void clear_query_id() ;
  const ::exec::shared::QueryId& query_id() const;
  PROTOBUF_NODISCARD ::exec::shared::QueryId* release_query_id();
  ::exec::shared::QueryId* mutable_query_id();
  void set_allocated_query_id(::exec::shared::QueryId* query_id);
  private:
  const ::exec::shared::QueryId& _internal_query_id() const;
  ::exec::shared::QueryId* _internal_mutable_query_id();
  public:
  void unsafe_arena_set_allocated_query_id(
      ::exec::shared::QueryId* query_id);
  ::exec::shared::QueryId* unsafe_arena_release_query_id();
  // optional .exec.shared.RecordBatchDef def = 6;
  bool has_def() const;
  void clear_def() ;
  const ::exec::shared::RecordBatchDef& def() const;
  PROTOBUF_NODISCARD ::exec::shared::RecordBatchDef* release_def();
  ::exec::shared::RecordBatchDef* mutable_def();
  void set_allocated_def(::exec::shared::RecordBatchDef* def);
  private:
  const ::exec::shared::RecordBatchDef& _internal_def() const;
  ::exec::shared::RecordBatchDef* _internal_mutable_def();
  public:
  void unsafe_arena_set_allocated_def(
      ::exec::shared::RecordBatchDef* def);
  ::exec::shared::RecordBatchDef* unsafe_arena_release_def();
  // optional int32 receiving_major_fragment_id = 2;
  bool has_receiving_major_fragment_id() const;
  void clear_receiving_major_fragment_id() ;
  ::int32_t receiving_major_fragment_id() const;
  void set_receiving_major_fragment_id(::int32_t value);

  private:
  ::int32_t _internal_receiving_major_fragment_id() const;
  void _internal_set_receiving_major_fragment_id(::int32_t value);

  public:
  // optional int32 sending_major_fragment_id = 4;
  bool has_sending_major_fragment_id() const;
  void clear_sending_major_fragment_id() ;
  ::int32_t sending_major_fragment_id() const;
  void set_sending_major_fragment_id(::int32_t value);

  private:
  ::int32_t _internal_sending_major_fragment_id() const;
  void _internal_set_sending_major_fragment_id(::int32_t value);

  public:
  // optional int32 sending_minor_fragment_id = 5;
  bool has_sending_minor_fragment_id() const;
  void clear_sending_minor_fragment_id() ;
  ::int32_t sending_minor_fragment_id() const;
  void set_sending_minor_fragment_id(::int32_t value);

  private:
  ::int32_t _internal_sending_minor_fragment_id() const;
  void _internal_set_sending_minor_fragment_id(::int32_t value);

  public:
  // optional bool isLastBatch = 7;
  bool has_islastbatch() const;
  void clear_islastbatch() ;
  bool islastbatch() const;
  void set_islastbatch(bool value);

  private:
  bool _internal_islastbatch() const;
  void _internal_set_islastbatch(bool value);

  public:
  // @@protoc_insertion_point(class_scope:exec.bit.data.FragmentRecordBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> receiving_minor_fragment_id_;
    ::exec::shared::QueryId* query_id_;
    ::exec::shared::RecordBatchDef* def_;
    ::int32_t receiving_major_fragment_id_;
    ::int32_t sending_major_fragment_id_;
    ::int32_t sending_minor_fragment_id_;
    bool islastbatch_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BitData_2eproto;
};// -------------------------------------------------------------------

class RuntimeFilterBDef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exec.bit.data.RuntimeFilterBDef) */ {
 public:
  inline RuntimeFilterBDef() : RuntimeFilterBDef(nullptr) {}
  ~RuntimeFilterBDef() override;
  explicit PROTOBUF_CONSTEXPR RuntimeFilterBDef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RuntimeFilterBDef(const RuntimeFilterBDef& from);
  RuntimeFilterBDef(RuntimeFilterBDef&& from) noexcept
    : RuntimeFilterBDef() {
    *this = ::std::move(from);
  }

  inline RuntimeFilterBDef& operator=(const RuntimeFilterBDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeFilterBDef& operator=(RuntimeFilterBDef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RuntimeFilterBDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const RuntimeFilterBDef* internal_default_instance() {
    return reinterpret_cast<const RuntimeFilterBDef*>(
               &_RuntimeFilterBDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RuntimeFilterBDef& a, RuntimeFilterBDef& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeFilterBDef* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuntimeFilterBDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RuntimeFilterBDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RuntimeFilterBDef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RuntimeFilterBDef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RuntimeFilterBDef& from) {
    RuntimeFilterBDef::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeFilterBDef* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "exec.bit.data.RuntimeFilterBDef";
  }
  protected:
  explicit RuntimeFilterBDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBloomFilterSizeInBytesFieldNumber = 5,
    kProbeFieldsFieldNumber = 6,
    kQueryIdFieldNumber = 1,
    kMajorFragmentIdFieldNumber = 2,
    kMinorFragmentIdFieldNumber = 3,
    kToForemanFieldNumber = 4,
    kHjOpIdFieldNumber = 7,
    kRfIdentifierFieldNumber = 8,
  };
  // repeated int32 bloom_filter_size_in_bytes = 5;
  int bloom_filter_size_in_bytes_size() const;
  private:
  int _internal_bloom_filter_size_in_bytes_size() const;

  public:
  void clear_bloom_filter_size_in_bytes() ;
  ::int32_t bloom_filter_size_in_bytes(int index) const;
  void set_bloom_filter_size_in_bytes(int index, ::int32_t value);
  void add_bloom_filter_size_in_bytes(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& bloom_filter_size_in_bytes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_bloom_filter_size_in_bytes();

  private:
  ::int32_t _internal_bloom_filter_size_in_bytes(int index) const;
  void _internal_add_bloom_filter_size_in_bytes(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_bloom_filter_size_in_bytes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_bloom_filter_size_in_bytes();

  public:
  // repeated string probe_fields = 6;
  int probe_fields_size() const;
  private:
  int _internal_probe_fields_size() const;

  public:
  void clear_probe_fields() ;
  const std::string& probe_fields(int index) const;
  std::string* mutable_probe_fields(int index);
  void set_probe_fields(int index, const std::string& value);
  void set_probe_fields(int index, std::string&& value);
  void set_probe_fields(int index, const char* value);
  void set_probe_fields(int index, const char* value, std::size_t size);
  void set_probe_fields(int index, absl::string_view value);
  std::string* add_probe_fields();
  void add_probe_fields(const std::string& value);
  void add_probe_fields(std::string&& value);
  void add_probe_fields(const char* value);
  void add_probe_fields(const char* value, std::size_t size);
  void add_probe_fields(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& probe_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_probe_fields();

  private:
  const std::string& _internal_probe_fields(int index) const;
  std::string* _internal_add_probe_fields();

  public:
  // optional .exec.shared.QueryId query_id = 1;
  bool has_query_id() const;
  void clear_query_id() ;
  const ::exec::shared::QueryId& query_id() const;
  PROTOBUF_NODISCARD ::exec::shared::QueryId* release_query_id();
  ::exec::shared::QueryId* mutable_query_id();
  void set_allocated_query_id(::exec::shared::QueryId* query_id);
  private:
  const ::exec::shared::QueryId& _internal_query_id() const;
  ::exec::shared::QueryId* _internal_mutable_query_id();
  public:
  void unsafe_arena_set_allocated_query_id(
      ::exec::shared::QueryId* query_id);
  ::exec::shared::QueryId* unsafe_arena_release_query_id();
  // optional int32 major_fragment_id = 2;
  bool has_major_fragment_id() const;
  void clear_major_fragment_id() ;
  ::int32_t major_fragment_id() const;
  void set_major_fragment_id(::int32_t value);

  private:
  ::int32_t _internal_major_fragment_id() const;
  void _internal_set_major_fragment_id(::int32_t value);

  public:
  // optional int32 minor_fragment_id = 3;
  bool has_minor_fragment_id() const;
  void clear_minor_fragment_id() ;
  ::int32_t minor_fragment_id() const;
  void set_minor_fragment_id(::int32_t value);

  private:
  ::int32_t _internal_minor_fragment_id() const;
  void _internal_set_minor_fragment_id(::int32_t value);

  public:
  // optional bool to_foreman = 4;
  bool has_to_foreman() const;
  void clear_to_foreman() ;
  bool to_foreman() const;
  void set_to_foreman(bool value);

  private:
  bool _internal_to_foreman() const;
  void _internal_set_to_foreman(bool value);

  public:
  // optional int32 hj_op_id = 7;
  bool has_hj_op_id() const;
  void clear_hj_op_id() ;
  ::int32_t hj_op_id() const;
  void set_hj_op_id(::int32_t value);

  private:
  ::int32_t _internal_hj_op_id() const;
  void _internal_set_hj_op_id(::int32_t value);

  public:
  // optional int64 rf_identifier = 8;
  bool has_rf_identifier() const;
  void clear_rf_identifier() ;
  ::int64_t rf_identifier() const;
  void set_rf_identifier(::int64_t value);

  private:
  ::int64_t _internal_rf_identifier() const;
  void _internal_set_rf_identifier(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:exec.bit.data.RuntimeFilterBDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> bloom_filter_size_in_bytes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> probe_fields_;
    ::exec::shared::QueryId* query_id_;
    ::int32_t major_fragment_id_;
    ::int32_t minor_fragment_id_;
    bool to_foreman_;
    ::int32_t hj_op_id_;
    ::int64_t rf_identifier_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BitData_2eproto;
};// -------------------------------------------------------------------

class AckWithCredit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exec.bit.data.AckWithCredit) */ {
 public:
  inline AckWithCredit() : AckWithCredit(nullptr) {}
  ~AckWithCredit() override;
  explicit PROTOBUF_CONSTEXPR AckWithCredit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckWithCredit(const AckWithCredit& from);
  AckWithCredit(AckWithCredit&& from) noexcept
    : AckWithCredit() {
    *this = ::std::move(from);
  }

  inline AckWithCredit& operator=(const AckWithCredit& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckWithCredit& operator=(AckWithCredit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckWithCredit& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckWithCredit* internal_default_instance() {
    return reinterpret_cast<const AckWithCredit*>(
               &_AckWithCredit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AckWithCredit& a, AckWithCredit& b) {
    a.Swap(&b);
  }
  inline void Swap(AckWithCredit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckWithCredit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AckWithCredit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AckWithCredit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AckWithCredit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AckWithCredit& from) {
    AckWithCredit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckWithCredit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "exec.bit.data.AckWithCredit";
  }
  protected:
  explicit AckWithCredit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowedCreditFieldNumber = 1,
  };
  // optional int32 allowed_credit = 1;
  bool has_allowed_credit() const;
  void clear_allowed_credit() ;
  ::int32_t allowed_credit() const;
  void set_allowed_credit(::int32_t value);

  private:
  ::int32_t _internal_allowed_credit() const;
  void _internal_set_allowed_credit(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:exec.bit.data.AckWithCredit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t allowed_credit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BitData_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BitClientHandshake

// optional int32 rpc_version = 1;
inline bool BitClientHandshake::has_rpc_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BitClientHandshake::clear_rpc_version() {
  _impl_.rpc_version_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t BitClientHandshake::rpc_version() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.BitClientHandshake.rpc_version)
  return _internal_rpc_version();
}
inline void BitClientHandshake::set_rpc_version(::int32_t value) {
  _internal_set_rpc_version(value);
  // @@protoc_insertion_point(field_set:exec.bit.data.BitClientHandshake.rpc_version)
}
inline ::int32_t BitClientHandshake::_internal_rpc_version() const {
  return _impl_.rpc_version_;
}
inline void BitClientHandshake::_internal_set_rpc_version(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rpc_version_ = value;
}

// optional .exec.shared.RpcChannel channel = 2 [default = BIT_DATA];
inline bool BitClientHandshake::has_channel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void BitClientHandshake::clear_channel() {
  _impl_.channel_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::exec::shared::RpcChannel BitClientHandshake::channel() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.BitClientHandshake.channel)
  return _internal_channel();
}
inline void BitClientHandshake::set_channel(::exec::shared::RpcChannel value) {
   _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:exec.bit.data.BitClientHandshake.channel)
}
inline ::exec::shared::RpcChannel BitClientHandshake::_internal_channel() const {
  return static_cast<::exec::shared::RpcChannel>(_impl_.channel_);
}
inline void BitClientHandshake::_internal_set_channel(::exec::shared::RpcChannel value) {
  assert(::exec::shared::RpcChannel_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.channel_ = value;
}

// -------------------------------------------------------------------

// BitServerHandshake

// optional int32 rpc_version = 1;
inline bool BitServerHandshake::has_rpc_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BitServerHandshake::clear_rpc_version() {
  _impl_.rpc_version_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t BitServerHandshake::rpc_version() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.BitServerHandshake.rpc_version)
  return _internal_rpc_version();
}
inline void BitServerHandshake::set_rpc_version(::int32_t value) {
  _internal_set_rpc_version(value);
  // @@protoc_insertion_point(field_set:exec.bit.data.BitServerHandshake.rpc_version)
}
inline ::int32_t BitServerHandshake::_internal_rpc_version() const {
  return _impl_.rpc_version_;
}
inline void BitServerHandshake::_internal_set_rpc_version(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rpc_version_ = value;
}

// repeated string authenticationMechanisms = 2;
inline int BitServerHandshake::_internal_authenticationmechanisms_size() const {
  return _impl_.authenticationmechanisms_.size();
}
inline int BitServerHandshake::authenticationmechanisms_size() const {
  return _internal_authenticationmechanisms_size();
}
inline void BitServerHandshake::clear_authenticationmechanisms() {
  _impl_.authenticationmechanisms_.Clear();
}
inline std::string* BitServerHandshake::add_authenticationmechanisms() {
  std::string* _s = _internal_add_authenticationmechanisms();
  // @@protoc_insertion_point(field_add_mutable:exec.bit.data.BitServerHandshake.authenticationMechanisms)
  return _s;
}
inline const std::string& BitServerHandshake::_internal_authenticationmechanisms(int index) const {
  return _impl_.authenticationmechanisms_.Get(index);
}
inline const std::string& BitServerHandshake::authenticationmechanisms(int index) const {
  // @@protoc_insertion_point(field_get:exec.bit.data.BitServerHandshake.authenticationMechanisms)
  return _internal_authenticationmechanisms(index);
}
inline std::string* BitServerHandshake::mutable_authenticationmechanisms(int index) {
  // @@protoc_insertion_point(field_mutable:exec.bit.data.BitServerHandshake.authenticationMechanisms)
  return _impl_.authenticationmechanisms_.Mutable(index);
}
inline void BitServerHandshake::set_authenticationmechanisms(int index, const std::string& value) {
  _impl_.authenticationmechanisms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:exec.bit.data.BitServerHandshake.authenticationMechanisms)
}
inline void BitServerHandshake::set_authenticationmechanisms(int index, std::string&& value) {
  _impl_.authenticationmechanisms_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:exec.bit.data.BitServerHandshake.authenticationMechanisms)
}
inline void BitServerHandshake::set_authenticationmechanisms(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _impl_.authenticationmechanisms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:exec.bit.data.BitServerHandshake.authenticationMechanisms)
}
inline void BitServerHandshake::set_authenticationmechanisms(int index, const char* value,
                              std::size_t size) {
  _impl_.authenticationmechanisms_.Mutable(index)->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:exec.bit.data.BitServerHandshake.authenticationMechanisms)
}
inline void BitServerHandshake::set_authenticationmechanisms(int index, absl::string_view value) {
  _impl_.authenticationmechanisms_.Mutable(index)->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:exec.bit.data.BitServerHandshake.authenticationMechanisms)
}
inline std::string* BitServerHandshake::_internal_add_authenticationmechanisms() { return _impl_.authenticationmechanisms_.Add(); }
inline void BitServerHandshake::add_authenticationmechanisms(const std::string& value) {
  _impl_.authenticationmechanisms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:exec.bit.data.BitServerHandshake.authenticationMechanisms)
}
inline void BitServerHandshake::add_authenticationmechanisms(std::string&& value) {
  _impl_.authenticationmechanisms_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:exec.bit.data.BitServerHandshake.authenticationMechanisms)
}
inline void BitServerHandshake::add_authenticationmechanisms(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _impl_.authenticationmechanisms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:exec.bit.data.BitServerHandshake.authenticationMechanisms)
}
inline void BitServerHandshake::add_authenticationmechanisms(const char* value, std::size_t size) {
  _impl_.authenticationmechanisms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:exec.bit.data.BitServerHandshake.authenticationMechanisms)
}
inline void BitServerHandshake::add_authenticationmechanisms(absl::string_view value) {
  _impl_.authenticationmechanisms_.Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:exec.bit.data.BitServerHandshake.authenticationMechanisms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BitServerHandshake::authenticationmechanisms() const {
  // @@protoc_insertion_point(field_list:exec.bit.data.BitServerHandshake.authenticationMechanisms)
  return _impl_.authenticationmechanisms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* BitServerHandshake::mutable_authenticationmechanisms() {
  // @@protoc_insertion_point(field_mutable_list:exec.bit.data.BitServerHandshake.authenticationMechanisms)
  return &_impl_.authenticationmechanisms_;
}

// -------------------------------------------------------------------

// FragmentRecordBatch

// optional .exec.shared.QueryId query_id = 1;
inline bool FragmentRecordBatch::has_query_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.query_id_ != nullptr);
  return value;
}
inline const ::exec::shared::QueryId& FragmentRecordBatch::_internal_query_id() const {
  const ::exec::shared::QueryId* p = _impl_.query_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::exec::shared::QueryId&>(
      ::exec::shared::_QueryId_default_instance_);
}
inline const ::exec::shared::QueryId& FragmentRecordBatch::query_id() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.FragmentRecordBatch.query_id)
  return _internal_query_id();
}
inline void FragmentRecordBatch::unsafe_arena_set_allocated_query_id(
    ::exec::shared::QueryId* query_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_id_);
  }
  _impl_.query_id_ = query_id;
  if (query_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:exec.bit.data.FragmentRecordBatch.query_id)
}
inline ::exec::shared::QueryId* FragmentRecordBatch::release_query_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::exec::shared::QueryId* temp = _impl_.query_id_;
  _impl_.query_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::exec::shared::QueryId* FragmentRecordBatch::unsafe_arena_release_query_id() {
  // @@protoc_insertion_point(field_release:exec.bit.data.FragmentRecordBatch.query_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::exec::shared::QueryId* temp = _impl_.query_id_;
  _impl_.query_id_ = nullptr;
  return temp;
}
inline ::exec::shared::QueryId* FragmentRecordBatch::_internal_mutable_query_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.query_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::exec::shared::QueryId>(GetArenaForAllocation());
    _impl_.query_id_ = p;
  }
  return _impl_.query_id_;
}
inline ::exec::shared::QueryId* FragmentRecordBatch::mutable_query_id() {
  ::exec::shared::QueryId* _msg = _internal_mutable_query_id();
  // @@protoc_insertion_point(field_mutable:exec.bit.data.FragmentRecordBatch.query_id)
  return _msg;
}
inline void FragmentRecordBatch::set_allocated_query_id(::exec::shared::QueryId* query_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_id_);
  }
  if (query_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_id));
    if (message_arena != submessage_arena) {
      query_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.query_id_ = query_id;
  // @@protoc_insertion_point(field_set_allocated:exec.bit.data.FragmentRecordBatch.query_id)
}

// optional int32 receiving_major_fragment_id = 2;
inline bool FragmentRecordBatch::has_receiving_major_fragment_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FragmentRecordBatch::clear_receiving_major_fragment_id() {
  _impl_.receiving_major_fragment_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t FragmentRecordBatch::receiving_major_fragment_id() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.FragmentRecordBatch.receiving_major_fragment_id)
  return _internal_receiving_major_fragment_id();
}
inline void FragmentRecordBatch::set_receiving_major_fragment_id(::int32_t value) {
  _internal_set_receiving_major_fragment_id(value);
  // @@protoc_insertion_point(field_set:exec.bit.data.FragmentRecordBatch.receiving_major_fragment_id)
}
inline ::int32_t FragmentRecordBatch::_internal_receiving_major_fragment_id() const {
  return _impl_.receiving_major_fragment_id_;
}
inline void FragmentRecordBatch::_internal_set_receiving_major_fragment_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.receiving_major_fragment_id_ = value;
}

// repeated int32 receiving_minor_fragment_id = 3;
inline int FragmentRecordBatch::_internal_receiving_minor_fragment_id_size() const {
  return _impl_.receiving_minor_fragment_id_.size();
}
inline int FragmentRecordBatch::receiving_minor_fragment_id_size() const {
  return _internal_receiving_minor_fragment_id_size();
}
inline void FragmentRecordBatch::clear_receiving_minor_fragment_id() {
  _impl_.receiving_minor_fragment_id_.Clear();
}
inline ::int32_t FragmentRecordBatch::receiving_minor_fragment_id(int index) const {
  // @@protoc_insertion_point(field_get:exec.bit.data.FragmentRecordBatch.receiving_minor_fragment_id)
  return _internal_receiving_minor_fragment_id(index);
}
inline void FragmentRecordBatch::set_receiving_minor_fragment_id(int index, ::int32_t value) {
  _impl_.receiving_minor_fragment_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:exec.bit.data.FragmentRecordBatch.receiving_minor_fragment_id)
}
inline void FragmentRecordBatch::add_receiving_minor_fragment_id(::int32_t value) {
  _internal_add_receiving_minor_fragment_id(value);
  // @@protoc_insertion_point(field_add:exec.bit.data.FragmentRecordBatch.receiving_minor_fragment_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& FragmentRecordBatch::receiving_minor_fragment_id() const {
  // @@protoc_insertion_point(field_list:exec.bit.data.FragmentRecordBatch.receiving_minor_fragment_id)
  return _internal_receiving_minor_fragment_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* FragmentRecordBatch::mutable_receiving_minor_fragment_id() {
  // @@protoc_insertion_point(field_mutable_list:exec.bit.data.FragmentRecordBatch.receiving_minor_fragment_id)
  return _internal_mutable_receiving_minor_fragment_id();
}

inline ::int32_t FragmentRecordBatch::_internal_receiving_minor_fragment_id(int index) const {
  return _impl_.receiving_minor_fragment_id_.Get(index);
}
inline void FragmentRecordBatch::_internal_add_receiving_minor_fragment_id(::int32_t value) { _impl_.receiving_minor_fragment_id_.Add(value); }
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& FragmentRecordBatch::_internal_receiving_minor_fragment_id() const {
  return _impl_.receiving_minor_fragment_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* FragmentRecordBatch::_internal_mutable_receiving_minor_fragment_id() {
  return &_impl_.receiving_minor_fragment_id_;
}

// optional int32 sending_major_fragment_id = 4;
inline bool FragmentRecordBatch::has_sending_major_fragment_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FragmentRecordBatch::clear_sending_major_fragment_id() {
  _impl_.sending_major_fragment_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t FragmentRecordBatch::sending_major_fragment_id() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.FragmentRecordBatch.sending_major_fragment_id)
  return _internal_sending_major_fragment_id();
}
inline void FragmentRecordBatch::set_sending_major_fragment_id(::int32_t value) {
  _internal_set_sending_major_fragment_id(value);
  // @@protoc_insertion_point(field_set:exec.bit.data.FragmentRecordBatch.sending_major_fragment_id)
}
inline ::int32_t FragmentRecordBatch::_internal_sending_major_fragment_id() const {
  return _impl_.sending_major_fragment_id_;
}
inline void FragmentRecordBatch::_internal_set_sending_major_fragment_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.sending_major_fragment_id_ = value;
}

// optional int32 sending_minor_fragment_id = 5;
inline bool FragmentRecordBatch::has_sending_minor_fragment_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void FragmentRecordBatch::clear_sending_minor_fragment_id() {
  _impl_.sending_minor_fragment_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t FragmentRecordBatch::sending_minor_fragment_id() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.FragmentRecordBatch.sending_minor_fragment_id)
  return _internal_sending_minor_fragment_id();
}
inline void FragmentRecordBatch::set_sending_minor_fragment_id(::int32_t value) {
  _internal_set_sending_minor_fragment_id(value);
  // @@protoc_insertion_point(field_set:exec.bit.data.FragmentRecordBatch.sending_minor_fragment_id)
}
inline ::int32_t FragmentRecordBatch::_internal_sending_minor_fragment_id() const {
  return _impl_.sending_minor_fragment_id_;
}
inline void FragmentRecordBatch::_internal_set_sending_minor_fragment_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.sending_minor_fragment_id_ = value;
}

// optional .exec.shared.RecordBatchDef def = 6;
inline bool FragmentRecordBatch::has_def() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.def_ != nullptr);
  return value;
}
inline const ::exec::shared::RecordBatchDef& FragmentRecordBatch::_internal_def() const {
  const ::exec::shared::RecordBatchDef* p = _impl_.def_;
  return p != nullptr ? *p : reinterpret_cast<const ::exec::shared::RecordBatchDef&>(
      ::exec::shared::_RecordBatchDef_default_instance_);
}
inline const ::exec::shared::RecordBatchDef& FragmentRecordBatch::def() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.FragmentRecordBatch.def)
  return _internal_def();
}
inline void FragmentRecordBatch::unsafe_arena_set_allocated_def(
    ::exec::shared::RecordBatchDef* def) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.def_);
  }
  _impl_.def_ = def;
  if (def) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:exec.bit.data.FragmentRecordBatch.def)
}
inline ::exec::shared::RecordBatchDef* FragmentRecordBatch::release_def() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::exec::shared::RecordBatchDef* temp = _impl_.def_;
  _impl_.def_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::exec::shared::RecordBatchDef* FragmentRecordBatch::unsafe_arena_release_def() {
  // @@protoc_insertion_point(field_release:exec.bit.data.FragmentRecordBatch.def)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::exec::shared::RecordBatchDef* temp = _impl_.def_;
  _impl_.def_ = nullptr;
  return temp;
}
inline ::exec::shared::RecordBatchDef* FragmentRecordBatch::_internal_mutable_def() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.def_ == nullptr) {
    auto* p = CreateMaybeMessage<::exec::shared::RecordBatchDef>(GetArenaForAllocation());
    _impl_.def_ = p;
  }
  return _impl_.def_;
}
inline ::exec::shared::RecordBatchDef* FragmentRecordBatch::mutable_def() {
  ::exec::shared::RecordBatchDef* _msg = _internal_mutable_def();
  // @@protoc_insertion_point(field_mutable:exec.bit.data.FragmentRecordBatch.def)
  return _msg;
}
inline void FragmentRecordBatch::set_allocated_def(::exec::shared::RecordBatchDef* def) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.def_);
  }
  if (def) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(def));
    if (message_arena != submessage_arena) {
      def = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, def, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.def_ = def;
  // @@protoc_insertion_point(field_set_allocated:exec.bit.data.FragmentRecordBatch.def)
}

// optional bool isLastBatch = 7;
inline bool FragmentRecordBatch::has_islastbatch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void FragmentRecordBatch::clear_islastbatch() {
  _impl_.islastbatch_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool FragmentRecordBatch::islastbatch() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.FragmentRecordBatch.isLastBatch)
  return _internal_islastbatch();
}
inline void FragmentRecordBatch::set_islastbatch(bool value) {
  _internal_set_islastbatch(value);
  // @@protoc_insertion_point(field_set:exec.bit.data.FragmentRecordBatch.isLastBatch)
}
inline bool FragmentRecordBatch::_internal_islastbatch() const {
  return _impl_.islastbatch_;
}
inline void FragmentRecordBatch::_internal_set_islastbatch(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.islastbatch_ = value;
}

// -------------------------------------------------------------------

// RuntimeFilterBDef

// optional .exec.shared.QueryId query_id = 1;
inline bool RuntimeFilterBDef::has_query_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.query_id_ != nullptr);
  return value;
}
inline const ::exec::shared::QueryId& RuntimeFilterBDef::_internal_query_id() const {
  const ::exec::shared::QueryId* p = _impl_.query_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::exec::shared::QueryId&>(
      ::exec::shared::_QueryId_default_instance_);
}
inline const ::exec::shared::QueryId& RuntimeFilterBDef::query_id() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.RuntimeFilterBDef.query_id)
  return _internal_query_id();
}
inline void RuntimeFilterBDef::unsafe_arena_set_allocated_query_id(
    ::exec::shared::QueryId* query_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_id_);
  }
  _impl_.query_id_ = query_id;
  if (query_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:exec.bit.data.RuntimeFilterBDef.query_id)
}
inline ::exec::shared::QueryId* RuntimeFilterBDef::release_query_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::exec::shared::QueryId* temp = _impl_.query_id_;
  _impl_.query_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::exec::shared::QueryId* RuntimeFilterBDef::unsafe_arena_release_query_id() {
  // @@protoc_insertion_point(field_release:exec.bit.data.RuntimeFilterBDef.query_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::exec::shared::QueryId* temp = _impl_.query_id_;
  _impl_.query_id_ = nullptr;
  return temp;
}
inline ::exec::shared::QueryId* RuntimeFilterBDef::_internal_mutable_query_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.query_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::exec::shared::QueryId>(GetArenaForAllocation());
    _impl_.query_id_ = p;
  }
  return _impl_.query_id_;
}
inline ::exec::shared::QueryId* RuntimeFilterBDef::mutable_query_id() {
  ::exec::shared::QueryId* _msg = _internal_mutable_query_id();
  // @@protoc_insertion_point(field_mutable:exec.bit.data.RuntimeFilterBDef.query_id)
  return _msg;
}
inline void RuntimeFilterBDef::set_allocated_query_id(::exec::shared::QueryId* query_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_id_);
  }
  if (query_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_id));
    if (message_arena != submessage_arena) {
      query_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.query_id_ = query_id;
  // @@protoc_insertion_point(field_set_allocated:exec.bit.data.RuntimeFilterBDef.query_id)
}

// optional int32 major_fragment_id = 2;
inline bool RuntimeFilterBDef::has_major_fragment_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RuntimeFilterBDef::clear_major_fragment_id() {
  _impl_.major_fragment_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t RuntimeFilterBDef::major_fragment_id() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.RuntimeFilterBDef.major_fragment_id)
  return _internal_major_fragment_id();
}
inline void RuntimeFilterBDef::set_major_fragment_id(::int32_t value) {
  _internal_set_major_fragment_id(value);
  // @@protoc_insertion_point(field_set:exec.bit.data.RuntimeFilterBDef.major_fragment_id)
}
inline ::int32_t RuntimeFilterBDef::_internal_major_fragment_id() const {
  return _impl_.major_fragment_id_;
}
inline void RuntimeFilterBDef::_internal_set_major_fragment_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.major_fragment_id_ = value;
}

// optional int32 minor_fragment_id = 3;
inline bool RuntimeFilterBDef::has_minor_fragment_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void RuntimeFilterBDef::clear_minor_fragment_id() {
  _impl_.minor_fragment_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t RuntimeFilterBDef::minor_fragment_id() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.RuntimeFilterBDef.minor_fragment_id)
  return _internal_minor_fragment_id();
}
inline void RuntimeFilterBDef::set_minor_fragment_id(::int32_t value) {
  _internal_set_minor_fragment_id(value);
  // @@protoc_insertion_point(field_set:exec.bit.data.RuntimeFilterBDef.minor_fragment_id)
}
inline ::int32_t RuntimeFilterBDef::_internal_minor_fragment_id() const {
  return _impl_.minor_fragment_id_;
}
inline void RuntimeFilterBDef::_internal_set_minor_fragment_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.minor_fragment_id_ = value;
}

// optional bool to_foreman = 4;
inline bool RuntimeFilterBDef::has_to_foreman() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void RuntimeFilterBDef::clear_to_foreman() {
  _impl_.to_foreman_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool RuntimeFilterBDef::to_foreman() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.RuntimeFilterBDef.to_foreman)
  return _internal_to_foreman();
}
inline void RuntimeFilterBDef::set_to_foreman(bool value) {
  _internal_set_to_foreman(value);
  // @@protoc_insertion_point(field_set:exec.bit.data.RuntimeFilterBDef.to_foreman)
}
inline bool RuntimeFilterBDef::_internal_to_foreman() const {
  return _impl_.to_foreman_;
}
inline void RuntimeFilterBDef::_internal_set_to_foreman(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.to_foreman_ = value;
}

// repeated int32 bloom_filter_size_in_bytes = 5;
inline int RuntimeFilterBDef::_internal_bloom_filter_size_in_bytes_size() const {
  return _impl_.bloom_filter_size_in_bytes_.size();
}
inline int RuntimeFilterBDef::bloom_filter_size_in_bytes_size() const {
  return _internal_bloom_filter_size_in_bytes_size();
}
inline void RuntimeFilterBDef::clear_bloom_filter_size_in_bytes() {
  _impl_.bloom_filter_size_in_bytes_.Clear();
}
inline ::int32_t RuntimeFilterBDef::bloom_filter_size_in_bytes(int index) const {
  // @@protoc_insertion_point(field_get:exec.bit.data.RuntimeFilterBDef.bloom_filter_size_in_bytes)
  return _internal_bloom_filter_size_in_bytes(index);
}
inline void RuntimeFilterBDef::set_bloom_filter_size_in_bytes(int index, ::int32_t value) {
  _impl_.bloom_filter_size_in_bytes_.Set(index, value);
  // @@protoc_insertion_point(field_set:exec.bit.data.RuntimeFilterBDef.bloom_filter_size_in_bytes)
}
inline void RuntimeFilterBDef::add_bloom_filter_size_in_bytes(::int32_t value) {
  _internal_add_bloom_filter_size_in_bytes(value);
  // @@protoc_insertion_point(field_add:exec.bit.data.RuntimeFilterBDef.bloom_filter_size_in_bytes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& RuntimeFilterBDef::bloom_filter_size_in_bytes() const {
  // @@protoc_insertion_point(field_list:exec.bit.data.RuntimeFilterBDef.bloom_filter_size_in_bytes)
  return _internal_bloom_filter_size_in_bytes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* RuntimeFilterBDef::mutable_bloom_filter_size_in_bytes() {
  // @@protoc_insertion_point(field_mutable_list:exec.bit.data.RuntimeFilterBDef.bloom_filter_size_in_bytes)
  return _internal_mutable_bloom_filter_size_in_bytes();
}

inline ::int32_t RuntimeFilterBDef::_internal_bloom_filter_size_in_bytes(int index) const {
  return _impl_.bloom_filter_size_in_bytes_.Get(index);
}
inline void RuntimeFilterBDef::_internal_add_bloom_filter_size_in_bytes(::int32_t value) { _impl_.bloom_filter_size_in_bytes_.Add(value); }
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& RuntimeFilterBDef::_internal_bloom_filter_size_in_bytes() const {
  return _impl_.bloom_filter_size_in_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* RuntimeFilterBDef::_internal_mutable_bloom_filter_size_in_bytes() {
  return &_impl_.bloom_filter_size_in_bytes_;
}

// repeated string probe_fields = 6;
inline int RuntimeFilterBDef::_internal_probe_fields_size() const {
  return _impl_.probe_fields_.size();
}
inline int RuntimeFilterBDef::probe_fields_size() const {
  return _internal_probe_fields_size();
}
inline void RuntimeFilterBDef::clear_probe_fields() {
  _impl_.probe_fields_.Clear();
}
inline std::string* RuntimeFilterBDef::add_probe_fields() {
  std::string* _s = _internal_add_probe_fields();
  // @@protoc_insertion_point(field_add_mutable:exec.bit.data.RuntimeFilterBDef.probe_fields)
  return _s;
}
inline const std::string& RuntimeFilterBDef::_internal_probe_fields(int index) const {
  return _impl_.probe_fields_.Get(index);
}
inline const std::string& RuntimeFilterBDef::probe_fields(int index) const {
  // @@protoc_insertion_point(field_get:exec.bit.data.RuntimeFilterBDef.probe_fields)
  return _internal_probe_fields(index);
}
inline std::string* RuntimeFilterBDef::mutable_probe_fields(int index) {
  // @@protoc_insertion_point(field_mutable:exec.bit.data.RuntimeFilterBDef.probe_fields)
  return _impl_.probe_fields_.Mutable(index);
}
inline void RuntimeFilterBDef::set_probe_fields(int index, const std::string& value) {
  _impl_.probe_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:exec.bit.data.RuntimeFilterBDef.probe_fields)
}
inline void RuntimeFilterBDef::set_probe_fields(int index, std::string&& value) {
  _impl_.probe_fields_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:exec.bit.data.RuntimeFilterBDef.probe_fields)
}
inline void RuntimeFilterBDef::set_probe_fields(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _impl_.probe_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:exec.bit.data.RuntimeFilterBDef.probe_fields)
}
inline void RuntimeFilterBDef::set_probe_fields(int index, const char* value,
                              std::size_t size) {
  _impl_.probe_fields_.Mutable(index)->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:exec.bit.data.RuntimeFilterBDef.probe_fields)
}
inline void RuntimeFilterBDef::set_probe_fields(int index, absl::string_view value) {
  _impl_.probe_fields_.Mutable(index)->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:exec.bit.data.RuntimeFilterBDef.probe_fields)
}
inline std::string* RuntimeFilterBDef::_internal_add_probe_fields() { return _impl_.probe_fields_.Add(); }
inline void RuntimeFilterBDef::add_probe_fields(const std::string& value) {
  _impl_.probe_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:exec.bit.data.RuntimeFilterBDef.probe_fields)
}
inline void RuntimeFilterBDef::add_probe_fields(std::string&& value) {
  _impl_.probe_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:exec.bit.data.RuntimeFilterBDef.probe_fields)
}
inline void RuntimeFilterBDef::add_probe_fields(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _impl_.probe_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:exec.bit.data.RuntimeFilterBDef.probe_fields)
}
inline void RuntimeFilterBDef::add_probe_fields(const char* value, std::size_t size) {
  _impl_.probe_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:exec.bit.data.RuntimeFilterBDef.probe_fields)
}
inline void RuntimeFilterBDef::add_probe_fields(absl::string_view value) {
  _impl_.probe_fields_.Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:exec.bit.data.RuntimeFilterBDef.probe_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RuntimeFilterBDef::probe_fields() const {
  // @@protoc_insertion_point(field_list:exec.bit.data.RuntimeFilterBDef.probe_fields)
  return _impl_.probe_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* RuntimeFilterBDef::mutable_probe_fields() {
  // @@protoc_insertion_point(field_mutable_list:exec.bit.data.RuntimeFilterBDef.probe_fields)
  return &_impl_.probe_fields_;
}

// optional int32 hj_op_id = 7;
inline bool RuntimeFilterBDef::has_hj_op_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void RuntimeFilterBDef::clear_hj_op_id() {
  _impl_.hj_op_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t RuntimeFilterBDef::hj_op_id() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.RuntimeFilterBDef.hj_op_id)
  return _internal_hj_op_id();
}
inline void RuntimeFilterBDef::set_hj_op_id(::int32_t value) {
  _internal_set_hj_op_id(value);
  // @@protoc_insertion_point(field_set:exec.bit.data.RuntimeFilterBDef.hj_op_id)
}
inline ::int32_t RuntimeFilterBDef::_internal_hj_op_id() const {
  return _impl_.hj_op_id_;
}
inline void RuntimeFilterBDef::_internal_set_hj_op_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.hj_op_id_ = value;
}

// optional int64 rf_identifier = 8;
inline bool RuntimeFilterBDef::has_rf_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void RuntimeFilterBDef::clear_rf_identifier() {
  _impl_.rf_identifier_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t RuntimeFilterBDef::rf_identifier() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.RuntimeFilterBDef.rf_identifier)
  return _internal_rf_identifier();
}
inline void RuntimeFilterBDef::set_rf_identifier(::int64_t value) {
  _internal_set_rf_identifier(value);
  // @@protoc_insertion_point(field_set:exec.bit.data.RuntimeFilterBDef.rf_identifier)
}
inline ::int64_t RuntimeFilterBDef::_internal_rf_identifier() const {
  return _impl_.rf_identifier_;
}
inline void RuntimeFilterBDef::_internal_set_rf_identifier(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.rf_identifier_ = value;
}

// -------------------------------------------------------------------

// AckWithCredit

// optional int32 allowed_credit = 1;
inline bool AckWithCredit::has_allowed_credit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AckWithCredit::clear_allowed_credit() {
  _impl_.allowed_credit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t AckWithCredit::allowed_credit() const {
  // @@protoc_insertion_point(field_get:exec.bit.data.AckWithCredit.allowed_credit)
  return _internal_allowed_credit();
}
inline void AckWithCredit::set_allowed_credit(::int32_t value) {
  _internal_set_allowed_credit(value);
  // @@protoc_insertion_point(field_set:exec.bit.data.AckWithCredit.allowed_credit)
}
inline ::int32_t AckWithCredit::_internal_allowed_credit() const {
  return _impl_.allowed_credit_;
}
inline void AckWithCredit::_internal_set_allowed_credit(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.allowed_credit_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace bit
}  // namespace exec


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::exec::bit::data::RpcType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::exec::bit::data::RpcType>() {
  return ::exec::bit::data::RpcType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_BitData_2eproto_2epb_2eh
