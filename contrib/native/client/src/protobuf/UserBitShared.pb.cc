// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserBitShared.proto

#include "UserBitShared.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace exec {
namespace shared {
PROTOBUF_CONSTEXPR UserCredentials::UserCredentials(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct UserCredentialsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserCredentialsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserCredentialsDefaultTypeInternal() {}
  union {
    UserCredentials _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserCredentialsDefaultTypeInternal _UserCredentials_default_instance_;
PROTOBUF_CONSTEXPR QueryId::QueryId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.part1_)*/ ::int64_t{0}

  , /*decltype(_impl_.part2_)*/ ::int64_t{0}
} {}
struct QueryIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryIdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryIdDefaultTypeInternal() {}
  union {
    QueryId _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryIdDefaultTypeInternal _QueryId_default_instance_;
PROTOBUF_CONSTEXPR DrillPBError::DrillPBError(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parsing_error_)*/{}
  , /*decltype(_impl_.error_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.endpoint_)*/nullptr
  , /*decltype(_impl_.exception_)*/nullptr
  , /*decltype(_impl_.error_type_)*/ 0
} {}
struct DrillPBErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DrillPBErrorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DrillPBErrorDefaultTypeInternal() {}
  union {
    DrillPBError _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DrillPBErrorDefaultTypeInternal _DrillPBError_default_instance_;
PROTOBUF_CONSTEXPR ExceptionWrapper::ExceptionWrapper(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stack_trace_)*/{}
  , /*decltype(_impl_.exception_class_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.cause_)*/nullptr} {}
struct ExceptionWrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExceptionWrapperDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExceptionWrapperDefaultTypeInternal() {}
  union {
    ExceptionWrapper _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExceptionWrapperDefaultTypeInternal _ExceptionWrapper_default_instance_;
PROTOBUF_CONSTEXPR StackTraceElementWrapper::StackTraceElementWrapper(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.class_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.file_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.method_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.line_number_)*/ 0

  , /*decltype(_impl_.is_native_method_)*/ false
} {}
struct StackTraceElementWrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StackTraceElementWrapperDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StackTraceElementWrapperDefaultTypeInternal() {}
  union {
    StackTraceElementWrapper _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StackTraceElementWrapperDefaultTypeInternal _StackTraceElementWrapper_default_instance_;
PROTOBUF_CONSTEXPR ParsingError::ParsingError(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_column_)*/ 0

  , /*decltype(_impl_.start_row_)*/ 0

  , /*decltype(_impl_.end_column_)*/ 0

  , /*decltype(_impl_.end_row_)*/ 0
} {}
struct ParsingErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParsingErrorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParsingErrorDefaultTypeInternal() {}
  union {
    ParsingError _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParsingErrorDefaultTypeInternal _ParsingError_default_instance_;
PROTOBUF_CONSTEXPR RecordBatchDef::RecordBatchDef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.field_)*/{}
  , /*decltype(_impl_.record_count_)*/ 0

  , /*decltype(_impl_.carries_two_byte_selection_vector_)*/ false

  , /*decltype(_impl_.affected_rows_count_)*/ 0
} {}
struct RecordBatchDefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordBatchDefDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordBatchDefDefaultTypeInternal() {}
  union {
    RecordBatchDef _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordBatchDefDefaultTypeInternal _RecordBatchDef_default_instance_;
PROTOBUF_CONSTEXPR NamePart::NamePart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.child_)*/nullptr
  , /*decltype(_impl_.type_)*/ 0
} {}
struct NamePartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NamePartDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NamePartDefaultTypeInternal() {}
  union {
    NamePart _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NamePartDefaultTypeInternal _NamePart_default_instance_;
PROTOBUF_CONSTEXPR SerializedField::SerializedField(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.child_)*/{}
  , /*decltype(_impl_.major_type_)*/nullptr
  , /*decltype(_impl_.name_part_)*/nullptr
  , /*decltype(_impl_.value_count_)*/ 0

  , /*decltype(_impl_.var_byte_length_)*/ 0

  , /*decltype(_impl_.buffer_length_)*/ 0
} {}
struct SerializedFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SerializedFieldDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SerializedFieldDefaultTypeInternal() {}
  union {
    SerializedField _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SerializedFieldDefaultTypeInternal _SerializedField_default_instance_;
PROTOBUF_CONSTEXPR NodeStatus::NodeStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.memory_footprint_)*/ ::int64_t{0}

  , /*decltype(_impl_.node_id_)*/ 0
} {}
struct NodeStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeStatusDefaultTypeInternal() {}
  union {
    NodeStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeStatusDefaultTypeInternal _NodeStatus_default_instance_;
PROTOBUF_CONSTEXPR QueryResult::QueryResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_)*/{}
  , /*decltype(_impl_.query_id_)*/nullptr
  , /*decltype(_impl_.query_state_)*/ 0
} {}
struct QueryResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryResultDefaultTypeInternal() {}
  union {
    QueryResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryResultDefaultTypeInternal _QueryResult_default_instance_;
PROTOBUF_CONSTEXPR QueryData::QueryData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.query_id_)*/nullptr
  , /*decltype(_impl_.def_)*/nullptr
  , /*decltype(_impl_.row_count_)*/ 0

  , /*decltype(_impl_.affected_rows_count_)*/ 0
} {}
struct QueryDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDataDefaultTypeInternal() {}
  union {
    QueryData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDataDefaultTypeInternal _QueryData_default_instance_;
PROTOBUF_CONSTEXPR QueryInfo::QueryInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.query_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.user_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.options_json_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.queue_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.foreman_)*/nullptr
  , /*decltype(_impl_.start_)*/ ::int64_t{0}

  , /*decltype(_impl_.total_cost_)*/ 0

  , /*decltype(_impl_.state_)*/ 0
} {}
struct QueryInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryInfoDefaultTypeInternal() {}
  union {
    QueryInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryInfoDefaultTypeInternal _QueryInfo_default_instance_;
PROTOBUF_CONSTEXPR QueryProfile::QueryProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fragment_profile_)*/{}
  , /*decltype(_impl_.query_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.plan_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.user_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.error_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.verboseerror_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.error_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.error_node_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.options_json_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.queue_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.queryid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.foreman_)*/nullptr
  , /*decltype(_impl_.start_)*/ ::int64_t{0}

  , /*decltype(_impl_.end_)*/ ::int64_t{0}

  , /*decltype(_impl_.state_)*/ 0

  , /*decltype(_impl_.total_fragments_)*/ 0

  , /*decltype(_impl_.finished_fragments_)*/ 0

  , /*decltype(_impl_.autolimit_)*/ 0

  , /*decltype(_impl_.planend_)*/ ::int64_t{0}

  , /*decltype(_impl_.queuewaitend_)*/ ::int64_t{0}

  , /*decltype(_impl_.total_cost_)*/ 0

  , /*decltype(_impl_.type_)*/ 1
} {}
struct QueryProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryProfileDefaultTypeInternal() {}
  union {
    QueryProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryProfileDefaultTypeInternal _QueryProfile_default_instance_;
PROTOBUF_CONSTEXPR MajorFragmentProfile::MajorFragmentProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.minor_fragment_profile_)*/{}
  , /*decltype(_impl_.major_fragment_id_)*/ 0
} {}
struct MajorFragmentProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MajorFragmentProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MajorFragmentProfileDefaultTypeInternal() {}
  union {
    MajorFragmentProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MajorFragmentProfileDefaultTypeInternal _MajorFragmentProfile_default_instance_;
PROTOBUF_CONSTEXPR MinorFragmentProfile::MinorFragmentProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.operator_profile_)*/{}
  , /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_.endpoint_)*/nullptr
  , /*decltype(_impl_.state_)*/ 0

  , /*decltype(_impl_.minor_fragment_id_)*/ 0

  , /*decltype(_impl_.start_time_)*/ ::int64_t{0}

  , /*decltype(_impl_.end_time_)*/ ::int64_t{0}

  , /*decltype(_impl_.memory_used_)*/ ::int64_t{0}

  , /*decltype(_impl_.max_memory_used_)*/ ::int64_t{0}

  , /*decltype(_impl_.last_update_)*/ ::int64_t{0}

  , /*decltype(_impl_.last_progress_)*/ ::int64_t{0}
} {}
struct MinorFragmentProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MinorFragmentProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MinorFragmentProfileDefaultTypeInternal() {}
  union {
    MinorFragmentProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MinorFragmentProfileDefaultTypeInternal _MinorFragmentProfile_default_instance_;
PROTOBUF_CONSTEXPR OperatorProfile::OperatorProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.input_profile_)*/{}
  , /*decltype(_impl_.metric_)*/{}
  , /*decltype(_impl_.operator_type_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.operator_id_)*/ 0

  , /*decltype(_impl_.operator_type_)*/ 0

  , /*decltype(_impl_.setup_nanos_)*/ ::int64_t{0}

  , /*decltype(_impl_.process_nanos_)*/ ::int64_t{0}

  , /*decltype(_impl_.peak_local_memory_allocated_)*/ ::int64_t{0}

  , /*decltype(_impl_.wait_nanos_)*/ ::int64_t{0}
} {}
struct OperatorProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperatorProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperatorProfileDefaultTypeInternal() {}
  union {
    OperatorProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperatorProfileDefaultTypeInternal _OperatorProfile_default_instance_;
PROTOBUF_CONSTEXPR StreamProfile::StreamProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.records_)*/ ::int64_t{0}

  , /*decltype(_impl_.batches_)*/ ::int64_t{0}

  , /*decltype(_impl_.schemas_)*/ ::int64_t{0}
} {}
struct StreamProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamProfileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamProfileDefaultTypeInternal() {}
  union {
    StreamProfile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamProfileDefaultTypeInternal _StreamProfile_default_instance_;
PROTOBUF_CONSTEXPR MetricValue::MetricValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.long_value_)*/ ::int64_t{0}

  , /*decltype(_impl_.double_value_)*/ 0

  , /*decltype(_impl_.metric_id_)*/ 0
} {}
struct MetricValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricValueDefaultTypeInternal() {}
  union {
    MetricValue _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricValueDefaultTypeInternal _MetricValue_default_instance_;
PROTOBUF_CONSTEXPR Registry::Registry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.jar_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegistryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistryDefaultTypeInternal() {}
  union {
    Registry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistryDefaultTypeInternal _Registry_default_instance_;
PROTOBUF_CONSTEXPR Jar::Jar(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.function_signature_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct JarDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JarDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JarDefaultTypeInternal() {}
  union {
    Jar _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JarDefaultTypeInternal _Jar_default_instance_;
PROTOBUF_CONSTEXPR SaslMessage::SaslMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mechanism_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.status_)*/ 0
} {}
struct SaslMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SaslMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SaslMessageDefaultTypeInternal() {}
  union {
    SaslMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SaslMessageDefaultTypeInternal _SaslMessage_default_instance_;
}  // namespace shared
}  // namespace exec
static ::_pb::Metadata file_level_metadata_UserBitShared_2eproto[22];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_UserBitShared_2eproto[7];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_UserBitShared_2eproto = nullptr;
const ::uint32_t TableStruct_UserBitShared_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::exec::shared::UserCredentials, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::UserCredentials, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exec::shared::UserCredentials, _impl_.user_name_),
    0,
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryId, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryId, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryId, _impl_.part1_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryId, _impl_.part2_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::exec::shared::DrillPBError, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::DrillPBError, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exec::shared::DrillPBError, _impl_.error_id_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::DrillPBError, _impl_.endpoint_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::DrillPBError, _impl_.error_type_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::DrillPBError, _impl_.message_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::DrillPBError, _impl_.exception_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::DrillPBError, _impl_.parsing_error_),
    0,
    2,
    4,
    1,
    3,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::exec::shared::ExceptionWrapper, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::ExceptionWrapper, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exec::shared::ExceptionWrapper, _impl_.exception_class_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::ExceptionWrapper, _impl_.message_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::ExceptionWrapper, _impl_.stack_trace_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::ExceptionWrapper, _impl_.cause_),
    0,
    1,
    ~0u,
    2,
    PROTOBUF_FIELD_OFFSET(::exec::shared::StackTraceElementWrapper, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::StackTraceElementWrapper, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exec::shared::StackTraceElementWrapper, _impl_.class_name_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::StackTraceElementWrapper, _impl_.file_name_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::StackTraceElementWrapper, _impl_.line_number_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::StackTraceElementWrapper, _impl_.method_name_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::StackTraceElementWrapper, _impl_.is_native_method_),
    0,
    1,
    3,
    2,
    4,
    PROTOBUF_FIELD_OFFSET(::exec::shared::ParsingError, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::ParsingError, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exec::shared::ParsingError, _impl_.start_column_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::ParsingError, _impl_.start_row_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::ParsingError, _impl_.end_column_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::ParsingError, _impl_.end_row_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::exec::shared::RecordBatchDef, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::RecordBatchDef, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exec::shared::RecordBatchDef, _impl_.record_count_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::RecordBatchDef, _impl_.field_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::RecordBatchDef, _impl_.carries_two_byte_selection_vector_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::RecordBatchDef, _impl_.affected_rows_count_),
    0,
    ~0u,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::exec::shared::NamePart, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::NamePart, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exec::shared::NamePart, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::NamePart, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::NamePart, _impl_.child_),
    2,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::exec::shared::SerializedField, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::SerializedField, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exec::shared::SerializedField, _impl_.major_type_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::SerializedField, _impl_.name_part_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::SerializedField, _impl_.child_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::SerializedField, _impl_.value_count_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::SerializedField, _impl_.var_byte_length_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::SerializedField, _impl_.buffer_length_),
    0,
    1,
    ~0u,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::exec::shared::NodeStatus, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::NodeStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exec::shared::NodeStatus, _impl_.node_id_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::NodeStatus, _impl_.memory_footprint_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryResult, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryResult, _impl_.query_state_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryResult, _impl_.query_id_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryResult, _impl_.error_),
    1,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryData, _impl_.query_id_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryData, _impl_.row_count_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryData, _impl_.def_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryData, _impl_.affected_rows_count_),
    0,
    2,
    1,
    3,
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryInfo, _impl_.query_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryInfo, _impl_.start_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryInfo, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryInfo, _impl_.user_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryInfo, _impl_.foreman_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryInfo, _impl_.options_json_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryInfo, _impl_.total_cost_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryInfo, _impl_.queue_name_),
    0,
    5,
    7,
    1,
    4,
    2,
    6,
    3,
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.start_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.end_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.query_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.plan_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.foreman_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.total_fragments_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.finished_fragments_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.fragment_profile_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.user_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.error_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.verboseerror_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.error_id_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.error_node_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.options_json_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.planend_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.queuewaitend_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.total_cost_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.queue_name_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.queryid_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::QueryProfile, _impl_.autolimit_),
    10,
    21,
    12,
    13,
    0,
    1,
    11,
    14,
    15,
    16,
    ~0u,
    2,
    3,
    4,
    5,
    6,
    7,
    18,
    19,
    20,
    8,
    9,
    17,
    PROTOBUF_FIELD_OFFSET(::exec::shared::MajorFragmentProfile, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::MajorFragmentProfile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exec::shared::MajorFragmentProfile, _impl_.major_fragment_id_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::MajorFragmentProfile, _impl_.minor_fragment_profile_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::exec::shared::MinorFragmentProfile, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::MinorFragmentProfile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exec::shared::MinorFragmentProfile, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::MinorFragmentProfile, _impl_.error_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::MinorFragmentProfile, _impl_.minor_fragment_id_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::MinorFragmentProfile, _impl_.operator_profile_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::MinorFragmentProfile, _impl_.start_time_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::MinorFragmentProfile, _impl_.end_time_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::MinorFragmentProfile, _impl_.memory_used_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::MinorFragmentProfile, _impl_.max_memory_used_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::MinorFragmentProfile, _impl_.endpoint_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::MinorFragmentProfile, _impl_.last_update_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::MinorFragmentProfile, _impl_.last_progress_),
    2,
    0,
    3,
    ~0u,
    4,
    5,
    6,
    7,
    1,
    8,
    9,
    PROTOBUF_FIELD_OFFSET(::exec::shared::OperatorProfile, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::OperatorProfile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exec::shared::OperatorProfile, _impl_.input_profile_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::OperatorProfile, _impl_.operator_id_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::OperatorProfile, _impl_.operator_type_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::OperatorProfile, _impl_.setup_nanos_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::OperatorProfile, _impl_.process_nanos_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::OperatorProfile, _impl_.peak_local_memory_allocated_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::OperatorProfile, _impl_.metric_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::OperatorProfile, _impl_.wait_nanos_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::OperatorProfile, _impl_.operator_type_name_),
    ~0u,
    1,
    2,
    3,
    4,
    5,
    ~0u,
    6,
    0,
    PROTOBUF_FIELD_OFFSET(::exec::shared::StreamProfile, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::StreamProfile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exec::shared::StreamProfile, _impl_.records_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::StreamProfile, _impl_.batches_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::StreamProfile, _impl_.schemas_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::exec::shared::MetricValue, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::MetricValue, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exec::shared::MetricValue, _impl_.metric_id_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::MetricValue, _impl_.long_value_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::MetricValue, _impl_.double_value_),
    2,
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::exec::shared::Registry, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exec::shared::Registry, _impl_.jar_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::Jar, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::Jar, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exec::shared::Jar, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::Jar, _impl_.function_signature_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::exec::shared::SaslMessage, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::SaslMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exec::shared::SaslMessage, _impl_.mechanism_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::SaslMessage, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::exec::shared::SaslMessage, _impl_.status_),
    0,
    1,
    2,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 9, -1, sizeof(::exec::shared::UserCredentials)},
        { 10, 20, -1, sizeof(::exec::shared::QueryId)},
        { 22, 36, -1, sizeof(::exec::shared::DrillPBError)},
        { 42, 54, -1, sizeof(::exec::shared::ExceptionWrapper)},
        { 58, 71, -1, sizeof(::exec::shared::StackTraceElementWrapper)},
        { 76, 88, -1, sizeof(::exec::shared::ParsingError)},
        { 92, 104, -1, sizeof(::exec::shared::RecordBatchDef)},
        { 108, 119, -1, sizeof(::exec::shared::NamePart)},
        { 122, 136, -1, sizeof(::exec::shared::SerializedField)},
        { 142, 152, -1, sizeof(::exec::shared::NodeStatus)},
        { 154, 165, -1, sizeof(::exec::shared::QueryResult)},
        { 168, 180, -1, sizeof(::exec::shared::QueryData)},
        { 184, 200, -1, sizeof(::exec::shared::QueryInfo)},
        { 208, 239, -1, sizeof(::exec::shared::QueryProfile)},
        { 262, 272, -1, sizeof(::exec::shared::MajorFragmentProfile)},
        { 274, 293, -1, sizeof(::exec::shared::MinorFragmentProfile)},
        { 304, 321, -1, sizeof(::exec::shared::OperatorProfile)},
        { 330, 341, -1, sizeof(::exec::shared::StreamProfile)},
        { 344, 355, -1, sizeof(::exec::shared::MetricValue)},
        { 358, -1, -1, sizeof(::exec::shared::Registry)},
        { 367, 377, -1, sizeof(::exec::shared::Jar)},
        { 379, 390, -1, sizeof(::exec::shared::SaslMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::exec::shared::_UserCredentials_default_instance_._instance,
    &::exec::shared::_QueryId_default_instance_._instance,
    &::exec::shared::_DrillPBError_default_instance_._instance,
    &::exec::shared::_ExceptionWrapper_default_instance_._instance,
    &::exec::shared::_StackTraceElementWrapper_default_instance_._instance,
    &::exec::shared::_ParsingError_default_instance_._instance,
    &::exec::shared::_RecordBatchDef_default_instance_._instance,
    &::exec::shared::_NamePart_default_instance_._instance,
    &::exec::shared::_SerializedField_default_instance_._instance,
    &::exec::shared::_NodeStatus_default_instance_._instance,
    &::exec::shared::_QueryResult_default_instance_._instance,
    &::exec::shared::_QueryData_default_instance_._instance,
    &::exec::shared::_QueryInfo_default_instance_._instance,
    &::exec::shared::_QueryProfile_default_instance_._instance,
    &::exec::shared::_MajorFragmentProfile_default_instance_._instance,
    &::exec::shared::_MinorFragmentProfile_default_instance_._instance,
    &::exec::shared::_OperatorProfile_default_instance_._instance,
    &::exec::shared::_StreamProfile_default_instance_._instance,
    &::exec::shared::_MetricValue_default_instance_._instance,
    &::exec::shared::_Registry_default_instance_._instance,
    &::exec::shared::_Jar_default_instance_._instance,
    &::exec::shared::_SaslMessage_default_instance_._instance,
};
const char descriptor_table_protodef_UserBitShared_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\023UserBitShared.proto\022\013exec.shared\032\013Type"
    "s.proto\032\022Coordination.proto\032\017SchemaDef.p"
    "roto\"$\n\017UserCredentials\022\021\n\tuser_name\030\001 \001"
    "(\t\"\'\n\007QueryId\022\r\n\005part1\030\001 \001(\020\022\r\n\005part2\030\002 "
    "\001(\020\"\355\003\n\014DrillPBError\022\020\n\010error_id\030\001 \001(\t\022("
    "\n\010endpoint\030\002 \001(\0132\026.exec.DrillbitEndpoint"
    "\0227\n\nerror_type\030\003 \001(\0162#.exec.shared.Drill"
    "PBError.ErrorType\022\017\n\007message\030\004 \001(\t\0220\n\tex"
    "ception\030\005 \001(\0132\035.exec.shared.ExceptionWra"
    "pper\0220\n\rparsing_error\030\006 \003(\0132\031.exec.share"
    "d.ParsingError\"\362\001\n\tErrorType\022\016\n\nCONNECTI"
    "ON\020\000\022\r\n\tDATA_READ\020\001\022\016\n\nDATA_WRITE\020\002\022\014\n\010F"
    "UNCTION\020\003\022\t\n\005PARSE\020\004\022\016\n\nPERMISSION\020\005\022\010\n\004"
    "PLAN\020\006\022\014\n\010RESOURCE\020\007\022\n\n\006SYSTEM\020\010\022\031\n\025UNSU"
    "PPORTED_OPERATION\020\t\022\016\n\nVALIDATION\020\n\022\023\n\017E"
    "XECUTION_ERROR\020\013\022\022\n\016INTERNAL_ERROR\020\014\022\025\n\021"
    "UNSPECIFIED_ERROR\020\r\"\246\001\n\020ExceptionWrapper"
    "\022\027\n\017exception_class\030\001 \001(\t\022\017\n\007message\030\002 \001"
    "(\t\022:\n\013stack_trace\030\003 \003(\0132%.exec.shared.St"
    "ackTraceElementWrapper\022,\n\005cause\030\004 \001(\0132\035."
    "exec.shared.ExceptionWrapper\"\205\001\n\030StackTr"
    "aceElementWrapper\022\022\n\nclass_name\030\001 \001(\t\022\021\n"
    "\tfile_name\030\002 \001(\t\022\023\n\013line_number\030\003 \001(\005\022\023\n"
    "\013method_name\030\004 \001(\t\022\030\n\020is_native_method\030\005"
    " \001(\010\"\\\n\014ParsingError\022\024\n\014start_column\030\002 \001"
    "(\005\022\021\n\tstart_row\030\003 \001(\005\022\022\n\nend_column\030\004 \001("
    "\005\022\017\n\007end_row\030\005 \001(\005\"\233\001\n\016RecordBatchDef\022\024\n"
    "\014record_count\030\001 \001(\005\022+\n\005field\030\002 \003(\0132\034.exe"
    "c.shared.SerializedField\022)\n!carries_two_"
    "byte_selection_vector\030\003 \001(\010\022\033\n\023affected_"
    "rows_count\030\004 \001(\005\"\205\001\n\010NamePart\022(\n\004type\030\001 "
    "\001(\0162\032.exec.shared.NamePart.Type\022\014\n\004name\030"
    "\002 \001(\t\022$\n\005child\030\003 \001(\0132\025.exec.shared.NameP"
    "art\"\033\n\004Type\022\010\n\004NAME\020\000\022\t\n\005ARRAY\020\001\"\324\001\n\017Ser"
    "ializedField\022%\n\nmajor_type\030\001 \001(\0132\021.commo"
    "n.MajorType\022(\n\tname_part\030\002 \001(\0132\025.exec.sh"
    "ared.NamePart\022+\n\005child\030\003 \003(\0132\034.exec.shar"
    "ed.SerializedField\022\023\n\013value_count\030\004 \001(\005\022"
    "\027\n\017var_byte_length\030\005 \001(\005\022\025\n\rbuffer_lengt"
    "h\030\007 \001(\005\"7\n\nNodeStatus\022\017\n\007node_id\030\001 \001(\005\022\030"
    "\n\020memory_footprint\030\002 \001(\003\"\263\002\n\013QueryResult"
    "\0228\n\013query_state\030\001 \001(\0162#.exec.shared.Quer"
    "yResult.QueryState\022&\n\010query_id\030\002 \001(\0132\024.e"
    "xec.shared.QueryId\022(\n\005error\030\003 \003(\0132\031.exec"
    ".shared.DrillPBError\"\227\001\n\nQueryState\022\014\n\010S"
    "TARTING\020\000\022\013\n\007RUNNING\020\001\022\r\n\tCOMPLETED\020\002\022\014\n"
    "\010CANCELED\020\003\022\n\n\006FAILED\020\004\022\032\n\026CANCELLATION_"
    "REQUESTED\020\005\022\014\n\010ENQUEUED\020\006\022\r\n\tPREPARING\020\007"
    "\022\014\n\010PLANNING\020\010\"\215\001\n\tQueryData\022&\n\010query_id"
    "\030\001 \001(\0132\024.exec.shared.QueryId\022\021\n\trow_coun"
    "t\030\002 \001(\005\022(\n\003def\030\003 \001(\0132\033.exec.shared.Recor"
    "dBatchDef\022\033\n\023affected_rows_count\030\004 \001(\005\"\330"
    "\001\n\tQueryInfo\022\r\n\005query\030\001 \001(\t\022\r\n\005start\030\002 \001"
    "(\003\0222\n\005state\030\003 \001(\0162#.exec.shared.QueryRes"
    "ult.QueryState\022\017\n\004user\030\004 \001(\t:\001-\022\'\n\007forem"
    "an\030\005 \001(\0132\026.exec.DrillbitEndpoint\022\024\n\014opti"
    "ons_json\030\006 \001(\t\022\022\n\ntotal_cost\030\007 \001(\001\022\025\n\nqu"
    "eue_name\030\010 \001(\t:\001-\"\306\004\n\014QueryProfile\022 \n\002id"
    "\030\001 \001(\0132\024.exec.shared.QueryId\022$\n\004type\030\002 \001"
    "(\0162\026.exec.shared.QueryType\022\r\n\005start\030\003 \001("
    "\003\022\013\n\003end\030\004 \001(\003\022\r\n\005query\030\005 \001(\t\022\014\n\004plan\030\006 "
    "\001(\t\022\'\n\007foreman\030\007 \001(\0132\026.exec.DrillbitEndp"
    "oint\0222\n\005state\030\010 \001(\0162#.exec.shared.QueryR"
    "esult.QueryState\022\027\n\017total_fragments\030\t \001("
    "\005\022\032\n\022finished_fragments\030\n \001(\005\022;\n\020fragmen"
    "t_profile\030\013 \003(\0132!.exec.shared.MajorFragm"
    "entProfile\022\017\n\004user\030\014 \001(\t:\001-\022\r\n\005error\030\r \001"
    "(\t\022\024\n\014verboseError\030\016 \001(\t\022\020\n\010error_id\030\017 \001"
    "(\t\022\022\n\nerror_node\030\020 \001(\t\022\024\n\014options_json\030\021"
    " \001(\t\022\017\n\007planEnd\030\022 \001(\003\022\024\n\014queueWaitEnd\030\023 "
    "\001(\003\022\022\n\ntotal_cost\030\024 \001(\001\022\025\n\nqueue_name\030\025 "
    "\001(\t:\001-\022\017\n\007queryId\030\026 \001(\t\022\021\n\tautoLimit\030\027 \001"
    "(\005\"t\n\024MajorFragmentProfile\022\031\n\021major_frag"
    "ment_id\030\001 \001(\005\022A\n\026minor_fragment_profile\030"
    "\002 \003(\0132!.exec.shared.MinorFragmentProfile"
    "\"\350\002\n\024MinorFragmentProfile\022)\n\005state\030\001 \001(\016"
    "2\032.exec.shared.FragmentState\022(\n\005error\030\002 "
    "\001(\0132\031.exec.shared.DrillPBError\022\031\n\021minor_"
    "fragment_id\030\003 \001(\005\0226\n\020operator_profile\030\004 "
    "\003(\0132\034.exec.shared.OperatorProfile\022\022\n\nsta"
    "rt_time\030\005 \001(\003\022\020\n\010end_time\030\006 \001(\003\022\023\n\013memor"
    "y_used\030\007 \001(\003\022\027\n\017max_memory_used\030\010 \001(\003\022(\n"
    "\010endpoint\030\t \001(\0132\026.exec.DrillbitEndpoint\022"
    "\023\n\013last_update\030\n \001(\003\022\025\n\rlast_progress\030\013 "
    "\001(\003\"\237\002\n\017OperatorProfile\0221\n\rinput_profile"
    "\030\001 \003(\0132\032.exec.shared.StreamProfile\022\023\n\013op"
    "erator_id\030\003 \001(\005\022\031\n\roperator_type\030\004 \001(\005B\002"
    "\030\001\022\023\n\013setup_nanos\030\005 \001(\003\022\025\n\rprocess_nanos"
    "\030\006 \001(\003\022#\n\033peak_local_memory_allocated\030\007 "
    "\001(\003\022(\n\006metric\030\010 \003(\0132\030.exec.shared.Metric"
    "Value\022\022\n\nwait_nanos\030\t \001(\003\022\032\n\022operator_ty"
    "pe_name\030\n \001(\t\"B\n\rStreamProfile\022\017\n\007record"
    "s\030\001 \001(\003\022\017\n\007batches\030\002 \001(\003\022\017\n\007schemas\030\003 \001("
    "\003\"J\n\013MetricValue\022\021\n\tmetric_id\030\001 \001(\005\022\022\n\nl"
    "ong_value\030\002 \001(\003\022\024\n\014double_value\030\003 \001(\001\")\n"
    "\010Registry\022\035\n\003jar\030\001 \003(\0132\020.exec.shared.Jar"
    "\"/\n\003Jar\022\014\n\004name\030\001 \001(\t\022\032\n\022function_signat"
    "ure\030\002 \003(\t\"W\n\013SaslMessage\022\021\n\tmechanism\030\001 "
    "\001(\t\022\014\n\004data\030\002 \001(\014\022\'\n\006status\030\003 \001(\0162\027.exec"
    ".shared.SaslStatus*5\n\nRpcChannel\022\017\n\013BIT_"
    "CONTROL\020\000\022\014\n\010BIT_DATA\020\001\022\010\n\004USER\020\002*V\n\tQue"
    "ryType\022\007\n\003SQL\020\001\022\013\n\007LOGICAL\020\002\022\014\n\010PHYSICAL"
    "\020\003\022\r\n\tEXECUTION\020\004\022\026\n\022PREPARED_STATEMENT\020"
    "\005*\207\001\n\rFragmentState\022\013\n\007SENDING\020\000\022\027\n\023AWAI"
    "TING_ALLOCATION\020\001\022\013\n\007RUNNING\020\002\022\014\n\010FINISH"
    "ED\020\003\022\r\n\tCANCELLED\020\004\022\n\n\006FAILED\020\005\022\032\n\026CANCE"
    "LLATION_REQUESTED\020\006*g\n\nSaslStatus\022\020\n\014SAS"
    "L_UNKNOWN\020\000\022\016\n\nSASL_START\020\001\022\024\n\020SASL_IN_P"
    "ROGRESS\020\002\022\020\n\014SASL_SUCCESS\020\003\022\017\n\013SASL_FAIL"
    "ED\020\004B.\n\033org.apache.drill.exec.protoB\rUse"
    "rBitSharedH\001"
};
static const ::_pbi::DescriptorTable* const descriptor_table_UserBitShared_2eproto_deps[3] =
    {
        &::descriptor_table_Coordination_2eproto,
        &::descriptor_table_SchemaDef_2eproto,
        &::descriptor_table_Types_2eproto,
};
static ::absl::once_flag descriptor_table_UserBitShared_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_UserBitShared_2eproto = {
    false,
    false,
    4412,
    descriptor_table_protodef_UserBitShared_2eproto,
    "UserBitShared.proto",
    &descriptor_table_UserBitShared_2eproto_once,
    descriptor_table_UserBitShared_2eproto_deps,
    3,
    22,
    schemas,
    file_default_instances,
    TableStruct_UserBitShared_2eproto::offsets,
    file_level_metadata_UserBitShared_2eproto,
    file_level_enum_descriptors_UserBitShared_2eproto,
    file_level_service_descriptors_UserBitShared_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_UserBitShared_2eproto_getter() {
  return &descriptor_table_UserBitShared_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_UserBitShared_2eproto(&descriptor_table_UserBitShared_2eproto);
namespace exec {
namespace shared {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DrillPBError_ErrorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_UserBitShared_2eproto);
  return file_level_enum_descriptors_UserBitShared_2eproto[0];
}
bool DrillPBError_ErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr DrillPBError_ErrorType DrillPBError::CONNECTION;
constexpr DrillPBError_ErrorType DrillPBError::DATA_READ;
constexpr DrillPBError_ErrorType DrillPBError::DATA_WRITE;
constexpr DrillPBError_ErrorType DrillPBError::FUNCTION;
constexpr DrillPBError_ErrorType DrillPBError::PARSE;
constexpr DrillPBError_ErrorType DrillPBError::PERMISSION;
constexpr DrillPBError_ErrorType DrillPBError::PLAN;
constexpr DrillPBError_ErrorType DrillPBError::RESOURCE;
constexpr DrillPBError_ErrorType DrillPBError::SYSTEM;
constexpr DrillPBError_ErrorType DrillPBError::UNSUPPORTED_OPERATION;
constexpr DrillPBError_ErrorType DrillPBError::VALIDATION;
constexpr DrillPBError_ErrorType DrillPBError::EXECUTION_ERROR;
constexpr DrillPBError_ErrorType DrillPBError::INTERNAL_ERROR;
constexpr DrillPBError_ErrorType DrillPBError::UNSPECIFIED_ERROR;
constexpr DrillPBError_ErrorType DrillPBError::ErrorType_MIN;
constexpr DrillPBError_ErrorType DrillPBError::ErrorType_MAX;
constexpr int DrillPBError::ErrorType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NamePart_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_UserBitShared_2eproto);
  return file_level_enum_descriptors_UserBitShared_2eproto[1];
}
bool NamePart_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr NamePart_Type NamePart::NAME;
constexpr NamePart_Type NamePart::ARRAY;
constexpr NamePart_Type NamePart::Type_MIN;
constexpr NamePart_Type NamePart::Type_MAX;
constexpr int NamePart::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QueryResult_QueryState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_UserBitShared_2eproto);
  return file_level_enum_descriptors_UserBitShared_2eproto[2];
}
bool QueryResult_QueryState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr QueryResult_QueryState QueryResult::STARTING;
constexpr QueryResult_QueryState QueryResult::RUNNING;
constexpr QueryResult_QueryState QueryResult::COMPLETED;
constexpr QueryResult_QueryState QueryResult::CANCELED;
constexpr QueryResult_QueryState QueryResult::FAILED;
constexpr QueryResult_QueryState QueryResult::CANCELLATION_REQUESTED;
constexpr QueryResult_QueryState QueryResult::ENQUEUED;
constexpr QueryResult_QueryState QueryResult::PREPARING;
constexpr QueryResult_QueryState QueryResult::PLANNING;
constexpr QueryResult_QueryState QueryResult::QueryState_MIN;
constexpr QueryResult_QueryState QueryResult::QueryState_MAX;
constexpr int QueryResult::QueryState_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_UserBitShared_2eproto);
  return file_level_enum_descriptors_UserBitShared_2eproto[3];
}
bool RpcChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QueryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_UserBitShared_2eproto);
  return file_level_enum_descriptors_UserBitShared_2eproto[4];
}
bool QueryType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FragmentState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_UserBitShared_2eproto);
  return file_level_enum_descriptors_UserBitShared_2eproto[5];
}
bool FragmentState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SaslStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_UserBitShared_2eproto);
  return file_level_enum_descriptors_UserBitShared_2eproto[6];
}
bool SaslStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class UserCredentials::_Internal {
 public:
  using HasBits = decltype(std::declval<UserCredentials>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UserCredentials, _impl_._has_bits_);
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UserCredentials::UserCredentials(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exec.shared.UserCredentials)
}
UserCredentials::UserCredentials(const UserCredentials& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserCredentials* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_name_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:exec.shared.UserCredentials)
}

inline void UserCredentials::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_name_) {}

  };
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserCredentials::~UserCredentials() {
  // @@protoc_insertion_point(destructor:exec.shared.UserCredentials)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserCredentials::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_name_.Destroy();
}

void UserCredentials::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserCredentials::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.shared.UserCredentials)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.user_name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserCredentials::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string user_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.UserCredentials.user_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UserCredentials::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.shared.UserCredentials)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string user_name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_user_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.UserCredentials.user_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.shared.UserCredentials)
  return target;
}

::size_t UserCredentials::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.shared.UserCredentials)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string user_name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_user_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserCredentials::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserCredentials::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserCredentials::GetClassData() const { return &_class_data_; }


void UserCredentials::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserCredentials*>(&to_msg);
  auto& from = static_cast<const UserCredentials&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.shared.UserCredentials)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserCredentials::CopyFrom(const UserCredentials& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.shared.UserCredentials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCredentials::IsInitialized() const {
  return true;
}

void UserCredentials::InternalSwap(UserCredentials* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_name_, lhs_arena,
                                       &other->_impl_.user_name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserCredentials::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserBitShared_2eproto_getter, &descriptor_table_UserBitShared_2eproto_once,
      file_level_metadata_UserBitShared_2eproto[0]);
}
// ===================================================================

class QueryId::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryId>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryId, _impl_._has_bits_);
  static void set_has_part1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_part2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

QueryId::QueryId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exec.shared.QueryId)
}
QueryId::QueryId(const QueryId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:exec.shared.QueryId)
}

inline void QueryId::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.part1_) { ::int64_t{0} }

    , decltype(_impl_.part2_) { ::int64_t{0} }

  };
}

QueryId::~QueryId() {
  // @@protoc_insertion_point(destructor:exec.shared.QueryId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryId::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryId::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.shared.QueryId)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.part1_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.part2_) -
        reinterpret_cast<char*>(&_impl_.part1_)) + sizeof(_impl_.part2_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional sfixed64 part1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_part1(&has_bits);
          _impl_.part1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::int64_t>(ptr);
          ptr += sizeof(::int64_t);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional sfixed64 part2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_part2(&has_bits);
          _impl_.part2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::int64_t>(ptr);
          ptr += sizeof(::int64_t);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryId::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.shared.QueryId)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional sfixed64 part1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(
        1, this->_internal_part1(), target);
  }

  // optional sfixed64 part2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(
        2, this->_internal_part2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.shared.QueryId)
  return target;
}

::size_t QueryId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.shared.QueryId)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional sfixed64 part1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional sfixed64 part2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryId::GetClassData() const { return &_class_data_; }


void QueryId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryId*>(&to_msg);
  auto& from = static_cast<const QueryId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.shared.QueryId)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.part1_ = from._impl_.part1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.part2_ = from._impl_.part2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryId::CopyFrom(const QueryId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.shared.QueryId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryId::IsInitialized() const {
  return true;
}

void QueryId::InternalSwap(QueryId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryId, _impl_.part2_)
      + sizeof(QueryId::_impl_.part2_)
      - PROTOBUF_FIELD_OFFSET(QueryId, _impl_.part1_)>(
          reinterpret_cast<char*>(&_impl_.part1_),
          reinterpret_cast<char*>(&other->_impl_.part1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserBitShared_2eproto_getter, &descriptor_table_UserBitShared_2eproto_once,
      file_level_metadata_UserBitShared_2eproto[1]);
}
// ===================================================================

class DrillPBError::_Internal {
 public:
  using HasBits = decltype(std::declval<DrillPBError>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DrillPBError, _impl_._has_bits_);
  static void set_has_error_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::exec::DrillbitEndpoint& endpoint(const DrillPBError* msg);
  static void set_has_endpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_error_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::exec::shared::ExceptionWrapper& exception(const DrillPBError* msg);
  static void set_has_exception(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::exec::DrillbitEndpoint&
DrillPBError::_Internal::endpoint(const DrillPBError* msg) {
  return *msg->_impl_.endpoint_;
}
const ::exec::shared::ExceptionWrapper&
DrillPBError::_Internal::exception(const DrillPBError* msg) {
  return *msg->_impl_.exception_;
}
void DrillPBError::clear_endpoint() {
  if (_impl_.endpoint_ != nullptr) _impl_.endpoint_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
DrillPBError::DrillPBError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exec.shared.DrillPBError)
}
DrillPBError::DrillPBError(const DrillPBError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DrillPBError* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parsing_error_){from._impl_.parsing_error_}
    , decltype(_impl_.error_id_) {}

    , decltype(_impl_.message_) {}

    , decltype(_impl_.endpoint_){nullptr}
    , decltype(_impl_.exception_){nullptr}
    , decltype(_impl_.error_type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.error_id_.Set(from._internal_error_id(), _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.endpoint_ = new ::exec::DrillbitEndpoint(*from._impl_.endpoint_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.exception_ = new ::exec::shared::ExceptionWrapper(*from._impl_.exception_);
  }
  _this->_impl_.error_type_ = from._impl_.error_type_;
  // @@protoc_insertion_point(copy_constructor:exec.shared.DrillPBError)
}

inline void DrillPBError::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parsing_error_){arena}
    , decltype(_impl_.error_id_) {}

    , decltype(_impl_.message_) {}

    , decltype(_impl_.endpoint_){nullptr}
    , decltype(_impl_.exception_){nullptr}
    , decltype(_impl_.error_type_) { 0 }

  };
  _impl_.error_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DrillPBError::~DrillPBError() {
  // @@protoc_insertion_point(destructor:exec.shared.DrillPBError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DrillPBError::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parsing_error_.~RepeatedPtrField();
  _impl_.error_id_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.endpoint_;
  if (this != internal_default_instance()) delete _impl_.exception_;
}

void DrillPBError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DrillPBError::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.shared.DrillPBError)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parsing_error_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.error_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.endpoint_ != nullptr);
      _impl_.endpoint_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.exception_ != nullptr);
      _impl_.exception_->Clear();
    }
  }
  _impl_.error_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrillPBError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string error_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_error_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.DrillPBError.error_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .exec.DrillbitEndpoint endpoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpoint(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .exec.shared.DrillPBError.ErrorType error_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::exec::shared::DrillPBError_ErrorType_IsValid(static_cast<int>(val)))) {
            _internal_set_error_type(static_cast<::exec::shared::DrillPBError_ErrorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.DrillPBError.message");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .exec.shared.ExceptionWrapper exception = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_exception(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .exec.shared.ParsingError parsing_error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parsing_error(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DrillPBError::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.shared.DrillPBError)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string error_id = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_error_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.DrillPBError.error_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional .exec.DrillbitEndpoint endpoint = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::endpoint(this),
        _Internal::endpoint(this).GetCachedSize(), target, stream);
  }

  // optional .exec.shared.DrillPBError.ErrorType error_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_error_type(), target);
  }

  // optional string message = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.DrillPBError.message");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional .exec.shared.ExceptionWrapper exception = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::exception(this),
        _Internal::exception(this).GetCachedSize(), target, stream);
  }

  // repeated .exec.shared.ParsingError parsing_error = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_parsing_error_size()); i < n; i++) {
    const auto& repfield = this->_internal_parsing_error(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.shared.DrillPBError)
  return target;
}

::size_t DrillPBError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.shared.DrillPBError)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .exec.shared.ParsingError parsing_error = 6;
  total_size += 1UL * this->_internal_parsing_error_size();
  for (const auto& msg : this->_impl_.parsing_error_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string error_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_error_id());
    }

    // optional string message = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_message());
    }

    // optional .exec.DrillbitEndpoint endpoint = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.endpoint_);
    }

    // optional .exec.shared.ExceptionWrapper exception = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.exception_);
    }

    // optional .exec.shared.DrillPBError.ErrorType error_type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_error_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DrillPBError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DrillPBError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DrillPBError::GetClassData() const { return &_class_data_; }


void DrillPBError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DrillPBError*>(&to_msg);
  auto& from = static_cast<const DrillPBError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.shared.DrillPBError)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parsing_error_.MergeFrom(from._impl_.parsing_error_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error_id(from._internal_error_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_endpoint()->::exec::DrillbitEndpoint::MergeFrom(
          from._internal_endpoint());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_exception()->::exec::shared::ExceptionWrapper::MergeFrom(
          from._internal_exception());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.error_type_ = from._impl_.error_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DrillPBError::CopyFrom(const DrillPBError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.shared.DrillPBError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrillPBError::IsInitialized() const {
  return true;
}

void DrillPBError::InternalSwap(DrillPBError* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.parsing_error_.InternalSwap(&other->_impl_.parsing_error_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_id_, lhs_arena,
                                       &other->_impl_.error_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrillPBError, _impl_.error_type_)
      + sizeof(DrillPBError::_impl_.error_type_)
      - PROTOBUF_FIELD_OFFSET(DrillPBError, _impl_.endpoint_)>(
          reinterpret_cast<char*>(&_impl_.endpoint_),
          reinterpret_cast<char*>(&other->_impl_.endpoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrillPBError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserBitShared_2eproto_getter, &descriptor_table_UserBitShared_2eproto_once,
      file_level_metadata_UserBitShared_2eproto[2]);
}
// ===================================================================

class ExceptionWrapper::_Internal {
 public:
  using HasBits = decltype(std::declval<ExceptionWrapper>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ExceptionWrapper, _impl_._has_bits_);
  static void set_has_exception_class(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::exec::shared::ExceptionWrapper& cause(const ExceptionWrapper* msg);
  static void set_has_cause(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::exec::shared::ExceptionWrapper&
ExceptionWrapper::_Internal::cause(const ExceptionWrapper* msg) {
  return *msg->_impl_.cause_;
}
ExceptionWrapper::ExceptionWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exec.shared.ExceptionWrapper)
}
ExceptionWrapper::ExceptionWrapper(const ExceptionWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExceptionWrapper* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stack_trace_){from._impl_.stack_trace_}
    , decltype(_impl_.exception_class_) {}

    , decltype(_impl_.message_) {}

    , decltype(_impl_.cause_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.exception_class_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exception_class_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.exception_class_.Set(from._internal_exception_class(), _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.cause_ = new ::exec::shared::ExceptionWrapper(*from._impl_.cause_);
  }
  // @@protoc_insertion_point(copy_constructor:exec.shared.ExceptionWrapper)
}

inline void ExceptionWrapper::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stack_trace_){arena}
    , decltype(_impl_.exception_class_) {}

    , decltype(_impl_.message_) {}

    , decltype(_impl_.cause_){nullptr}
  };
  _impl_.exception_class_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exception_class_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExceptionWrapper::~ExceptionWrapper() {
  // @@protoc_insertion_point(destructor:exec.shared.ExceptionWrapper)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExceptionWrapper::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stack_trace_.~RepeatedPtrField();
  _impl_.exception_class_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.cause_;
}

void ExceptionWrapper::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExceptionWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.shared.ExceptionWrapper)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stack_trace_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.exception_class_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.cause_ != nullptr);
      _impl_.cause_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExceptionWrapper::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string exception_class = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_exception_class();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.ExceptionWrapper.exception_class");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.ExceptionWrapper.message");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .exec.shared.StackTraceElementWrapper stack_trace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stack_trace(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .exec.shared.ExceptionWrapper cause = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cause(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ExceptionWrapper::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.shared.ExceptionWrapper)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string exception_class = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_exception_class();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.ExceptionWrapper.exception_class");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.ExceptionWrapper.message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .exec.shared.StackTraceElementWrapper stack_trace = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stack_trace_size()); i < n; i++) {
    const auto& repfield = this->_internal_stack_trace(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .exec.shared.ExceptionWrapper cause = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::cause(this),
        _Internal::cause(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.shared.ExceptionWrapper)
  return target;
}

::size_t ExceptionWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.shared.ExceptionWrapper)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .exec.shared.StackTraceElementWrapper stack_trace = 3;
  total_size += 1UL * this->_internal_stack_trace_size();
  for (const auto& msg : this->_impl_.stack_trace_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string exception_class = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_exception_class());
    }

    // optional string message = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_message());
    }

    // optional .exec.shared.ExceptionWrapper cause = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cause_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExceptionWrapper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExceptionWrapper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExceptionWrapper::GetClassData() const { return &_class_data_; }


void ExceptionWrapper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExceptionWrapper*>(&to_msg);
  auto& from = static_cast<const ExceptionWrapper&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.shared.ExceptionWrapper)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stack_trace_.MergeFrom(from._impl_.stack_trace_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_exception_class(from._internal_exception_class());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_cause()->::exec::shared::ExceptionWrapper::MergeFrom(
          from._internal_cause());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExceptionWrapper::CopyFrom(const ExceptionWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.shared.ExceptionWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExceptionWrapper::IsInitialized() const {
  return true;
}

void ExceptionWrapper::InternalSwap(ExceptionWrapper* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stack_trace_.InternalSwap(&other->_impl_.stack_trace_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exception_class_, lhs_arena,
                                       &other->_impl_.exception_class_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);
  swap(_impl_.cause_, other->_impl_.cause_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExceptionWrapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserBitShared_2eproto_getter, &descriptor_table_UserBitShared_2eproto_once,
      file_level_metadata_UserBitShared_2eproto[3]);
}
// ===================================================================

class StackTraceElementWrapper::_Internal {
 public:
  using HasBits = decltype(std::declval<StackTraceElementWrapper>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StackTraceElementWrapper, _impl_._has_bits_);
  static void set_has_class_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_line_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_method_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_native_method(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

StackTraceElementWrapper::StackTraceElementWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exec.shared.StackTraceElementWrapper)
}
StackTraceElementWrapper::StackTraceElementWrapper(const StackTraceElementWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StackTraceElementWrapper* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.class_name_) {}

    , decltype(_impl_.file_name_) {}

    , decltype(_impl_.method_name_) {}

    , decltype(_impl_.line_number_) {}

    , decltype(_impl_.is_native_method_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.class_name_.Set(from._internal_class_name(), _this->GetArenaForAllocation());
  }
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), _this->GetArenaForAllocation());
  }
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.method_name_.Set(from._internal_method_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.line_number_, &from._impl_.line_number_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_native_method_) -
    reinterpret_cast<char*>(&_impl_.line_number_)) + sizeof(_impl_.is_native_method_));
  // @@protoc_insertion_point(copy_constructor:exec.shared.StackTraceElementWrapper)
}

inline void StackTraceElementWrapper::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.class_name_) {}

    , decltype(_impl_.file_name_) {}

    , decltype(_impl_.method_name_) {}

    , decltype(_impl_.line_number_) { 0 }

    , decltype(_impl_.is_native_method_) { false }

  };
  _impl_.class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StackTraceElementWrapper::~StackTraceElementWrapper() {
  // @@protoc_insertion_point(destructor:exec.shared.StackTraceElementWrapper)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StackTraceElementWrapper::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.class_name_.Destroy();
  _impl_.file_name_.Destroy();
  _impl_.method_name_.Destroy();
}

void StackTraceElementWrapper::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StackTraceElementWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.shared.StackTraceElementWrapper)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.class_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.method_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.line_number_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.is_native_method_) -
        reinterpret_cast<char*>(&_impl_.line_number_)) + sizeof(_impl_.is_native_method_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StackTraceElementWrapper::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string class_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_class_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.StackTraceElementWrapper.class_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.StackTraceElementWrapper.file_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 line_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_line_number(&has_bits);
          _impl_.line_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string method_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_method_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.StackTraceElementWrapper.method_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool is_native_method = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_is_native_method(&has_bits);
          _impl_.is_native_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StackTraceElementWrapper::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.shared.StackTraceElementWrapper)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string class_name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_class_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.StackTraceElementWrapper.class_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_file_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.StackTraceElementWrapper.file_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int32 line_number = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_line_number(), target);
  }

  // optional string method_name = 4;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_method_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.StackTraceElementWrapper.method_name");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional bool is_native_method = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_is_native_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.shared.StackTraceElementWrapper)
  return target;
}

::size_t StackTraceElementWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.shared.StackTraceElementWrapper)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string class_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_class_name());
    }

    // optional string file_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_file_name());
    }

    // optional string method_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_method_name());
    }

    // optional int32 line_number = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_line_number());
    }

    // optional bool is_native_method = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StackTraceElementWrapper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StackTraceElementWrapper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StackTraceElementWrapper::GetClassData() const { return &_class_data_; }


void StackTraceElementWrapper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StackTraceElementWrapper*>(&to_msg);
  auto& from = static_cast<const StackTraceElementWrapper&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.shared.StackTraceElementWrapper)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_class_name(from._internal_class_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_method_name(from._internal_method_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.line_number_ = from._impl_.line_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_native_method_ = from._impl_.is_native_method_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StackTraceElementWrapper::CopyFrom(const StackTraceElementWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.shared.StackTraceElementWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackTraceElementWrapper::IsInitialized() const {
  return true;
}

void StackTraceElementWrapper::InternalSwap(StackTraceElementWrapper* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_name_, lhs_arena,
                                       &other->_impl_.class_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.file_name_, lhs_arena,
                                       &other->_impl_.file_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.method_name_, lhs_arena,
                                       &other->_impl_.method_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StackTraceElementWrapper, _impl_.is_native_method_)
      + sizeof(StackTraceElementWrapper::_impl_.is_native_method_)
      - PROTOBUF_FIELD_OFFSET(StackTraceElementWrapper, _impl_.line_number_)>(
          reinterpret_cast<char*>(&_impl_.line_number_),
          reinterpret_cast<char*>(&other->_impl_.line_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StackTraceElementWrapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserBitShared_2eproto_getter, &descriptor_table_UserBitShared_2eproto_once,
      file_level_metadata_UserBitShared_2eproto[4]);
}
// ===================================================================

class ParsingError::_Internal {
 public:
  using HasBits = decltype(std::declval<ParsingError>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ParsingError, _impl_._has_bits_);
  static void set_has_start_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_row(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_column(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_row(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ParsingError::ParsingError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exec.shared.ParsingError)
}
ParsingError::ParsingError(const ParsingError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:exec.shared.ParsingError)
}

inline void ParsingError::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_column_) { 0 }

    , decltype(_impl_.start_row_) { 0 }

    , decltype(_impl_.end_column_) { 0 }

    , decltype(_impl_.end_row_) { 0 }

  };
}

ParsingError::~ParsingError() {
  // @@protoc_insertion_point(destructor:exec.shared.ParsingError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParsingError::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ParsingError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParsingError::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.shared.ParsingError)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.start_column_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.end_row_) -
        reinterpret_cast<char*>(&_impl_.start_column_)) + sizeof(_impl_.end_row_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParsingError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 start_column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_start_column(&has_bits);
          _impl_.start_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 start_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_start_row(&has_bits);
          _impl_.start_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 end_column = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_end_column(&has_bits);
          _impl_.end_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 end_row = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_end_row(&has_bits);
          _impl_.end_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ParsingError::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.shared.ParsingError)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 start_column = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_start_column(), target);
  }

  // optional int32 start_row = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_start_row(), target);
  }

  // optional int32 end_column = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_end_column(), target);
  }

  // optional int32 end_row = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_end_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.shared.ParsingError)
  return target;
}

::size_t ParsingError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.shared.ParsingError)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 start_column = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_start_column());
    }

    // optional int32 start_row = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_start_row());
    }

    // optional int32 end_column = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_end_column());
    }

    // optional int32 end_row = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_end_row());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParsingError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParsingError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParsingError::GetClassData() const { return &_class_data_; }


void ParsingError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParsingError*>(&to_msg);
  auto& from = static_cast<const ParsingError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.shared.ParsingError)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.start_column_ = from._impl_.start_column_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.start_row_ = from._impl_.start_row_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.end_column_ = from._impl_.end_column_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.end_row_ = from._impl_.end_row_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParsingError::CopyFrom(const ParsingError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.shared.ParsingError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParsingError::IsInitialized() const {
  return true;
}

void ParsingError::InternalSwap(ParsingError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParsingError, _impl_.end_row_)
      + sizeof(ParsingError::_impl_.end_row_)
      - PROTOBUF_FIELD_OFFSET(ParsingError, _impl_.start_column_)>(
          reinterpret_cast<char*>(&_impl_.start_column_),
          reinterpret_cast<char*>(&other->_impl_.start_column_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParsingError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserBitShared_2eproto_getter, &descriptor_table_UserBitShared_2eproto_once,
      file_level_metadata_UserBitShared_2eproto[5]);
}
// ===================================================================

class RecordBatchDef::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordBatchDef>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RecordBatchDef, _impl_._has_bits_);
  static void set_has_record_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_carries_two_byte_selection_vector(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_affected_rows_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RecordBatchDef::RecordBatchDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exec.shared.RecordBatchDef)
}
RecordBatchDef::RecordBatchDef(const RecordBatchDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordBatchDef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_){from._impl_.field_}
    , decltype(_impl_.record_count_) {}

    , decltype(_impl_.carries_two_byte_selection_vector_) {}

    , decltype(_impl_.affected_rows_count_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.record_count_, &from._impl_.record_count_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.affected_rows_count_) -
    reinterpret_cast<char*>(&_impl_.record_count_)) + sizeof(_impl_.affected_rows_count_));
  // @@protoc_insertion_point(copy_constructor:exec.shared.RecordBatchDef)
}

inline void RecordBatchDef::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_){arena}
    , decltype(_impl_.record_count_) { 0 }

    , decltype(_impl_.carries_two_byte_selection_vector_) { false }

    , decltype(_impl_.affected_rows_count_) { 0 }

  };
}

RecordBatchDef::~RecordBatchDef() {
  // @@protoc_insertion_point(destructor:exec.shared.RecordBatchDef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordBatchDef::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_.~RepeatedPtrField();
}

void RecordBatchDef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordBatchDef::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.shared.RecordBatchDef)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.record_count_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.affected_rows_count_) -
        reinterpret_cast<char*>(&_impl_.record_count_)) + sizeof(_impl_.affected_rows_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordBatchDef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 record_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_record_count(&has_bits);
          _impl_.record_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .exec.shared.SerializedField field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool carries_two_byte_selection_vector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_carries_two_byte_selection_vector(&has_bits);
          _impl_.carries_two_byte_selection_vector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 affected_rows_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_affected_rows_count(&has_bits);
          _impl_.affected_rows_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RecordBatchDef::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.shared.RecordBatchDef)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 record_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_record_count(), target);
  }

  // repeated .exec.shared.SerializedField field = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field_size()); i < n; i++) {
    const auto& repfield = this->_internal_field(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool carries_two_byte_selection_vector = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_carries_two_byte_selection_vector(), target);
  }

  // optional int32 affected_rows_count = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_affected_rows_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.shared.RecordBatchDef)
  return target;
}

::size_t RecordBatchDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.shared.RecordBatchDef)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .exec.shared.SerializedField field = 2;
  total_size += 1UL * this->_internal_field_size();
  for (const auto& msg : this->_impl_.field_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 record_count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_record_count());
    }

    // optional bool carries_two_byte_selection_vector = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

    // optional int32 affected_rows_count = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_affected_rows_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordBatchDef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordBatchDef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordBatchDef::GetClassData() const { return &_class_data_; }


void RecordBatchDef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordBatchDef*>(&to_msg);
  auto& from = static_cast<const RecordBatchDef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.shared.RecordBatchDef)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.field_.MergeFrom(from._impl_.field_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.record_count_ = from._impl_.record_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.carries_two_byte_selection_vector_ = from._impl_.carries_two_byte_selection_vector_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.affected_rows_count_ = from._impl_.affected_rows_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordBatchDef::CopyFrom(const RecordBatchDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.shared.RecordBatchDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordBatchDef::IsInitialized() const {
  return true;
}

void RecordBatchDef::InternalSwap(RecordBatchDef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.field_.InternalSwap(&other->_impl_.field_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordBatchDef, _impl_.affected_rows_count_)
      + sizeof(RecordBatchDef::_impl_.affected_rows_count_)
      - PROTOBUF_FIELD_OFFSET(RecordBatchDef, _impl_.record_count_)>(
          reinterpret_cast<char*>(&_impl_.record_count_),
          reinterpret_cast<char*>(&other->_impl_.record_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordBatchDef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserBitShared_2eproto_getter, &descriptor_table_UserBitShared_2eproto_once,
      file_level_metadata_UserBitShared_2eproto[6]);
}
// ===================================================================

class NamePart::_Internal {
 public:
  using HasBits = decltype(std::declval<NamePart>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NamePart, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::exec::shared::NamePart& child(const NamePart* msg);
  static void set_has_child(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::exec::shared::NamePart&
NamePart::_Internal::child(const NamePart* msg) {
  return *msg->_impl_.child_;
}
NamePart::NamePart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exec.shared.NamePart)
}
NamePart::NamePart(const NamePart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NamePart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.child_){nullptr}
    , decltype(_impl_.type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.child_ = new ::exec::shared::NamePart(*from._impl_.child_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:exec.shared.NamePart)
}

inline void NamePart::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.child_){nullptr}
    , decltype(_impl_.type_) { 0 }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NamePart::~NamePart() {
  // @@protoc_insertion_point(destructor:exec.shared.NamePart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NamePart::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.child_;
}

void NamePart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NamePart::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.shared.NamePart)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.child_ != nullptr);
      _impl_.child_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamePart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .exec.shared.NamePart.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::exec::shared::NamePart_Type_IsValid(static_cast<int>(val)))) {
            _internal_set_type(static_cast<::exec::shared::NamePart_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.NamePart.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .exec.shared.NamePart child = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NamePart::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.shared.NamePart)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .exec.shared.NamePart.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.NamePart.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional .exec.shared.NamePart child = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::child(this),
        _Internal::child(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.shared.NamePart)
  return target;
}

::size_t NamePart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.shared.NamePart)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional .exec.shared.NamePart child = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.child_);
    }

    // optional .exec.shared.NamePart.Type type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamePart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NamePart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamePart::GetClassData() const { return &_class_data_; }


void NamePart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NamePart*>(&to_msg);
  auto& from = static_cast<const NamePart&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.shared.NamePart)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_child()->::exec::shared::NamePart::MergeFrom(
          from._internal_child());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamePart::CopyFrom(const NamePart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.shared.NamePart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamePart::IsInitialized() const {
  return true;
}

void NamePart::InternalSwap(NamePart* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NamePart, _impl_.type_)
      + sizeof(NamePart::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(NamePart, _impl_.child_)>(
          reinterpret_cast<char*>(&_impl_.child_),
          reinterpret_cast<char*>(&other->_impl_.child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NamePart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserBitShared_2eproto_getter, &descriptor_table_UserBitShared_2eproto_once,
      file_level_metadata_UserBitShared_2eproto[7]);
}
// ===================================================================

class SerializedField::_Internal {
 public:
  using HasBits = decltype(std::declval<SerializedField>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SerializedField, _impl_._has_bits_);
  static const ::common::MajorType& major_type(const SerializedField* msg);
  static void set_has_major_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::exec::shared::NamePart& name_part(const SerializedField* msg);
  static void set_has_name_part(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_byte_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_buffer_length(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::common::MajorType&
SerializedField::_Internal::major_type(const SerializedField* msg) {
  return *msg->_impl_.major_type_;
}
const ::exec::shared::NamePart&
SerializedField::_Internal::name_part(const SerializedField* msg) {
  return *msg->_impl_.name_part_;
}
void SerializedField::clear_major_type() {
  if (_impl_.major_type_ != nullptr) _impl_.major_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SerializedField::SerializedField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exec.shared.SerializedField)
}
SerializedField::SerializedField(const SerializedField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SerializedField* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.child_){from._impl_.child_}
    , decltype(_impl_.major_type_){nullptr}
    , decltype(_impl_.name_part_){nullptr}
    , decltype(_impl_.value_count_) {}

    , decltype(_impl_.var_byte_length_) {}

    , decltype(_impl_.buffer_length_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.major_type_ = new ::common::MajorType(*from._impl_.major_type_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.name_part_ = new ::exec::shared::NamePart(*from._impl_.name_part_);
  }
  ::memcpy(&_impl_.value_count_, &from._impl_.value_count_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.buffer_length_) -
    reinterpret_cast<char*>(&_impl_.value_count_)) + sizeof(_impl_.buffer_length_));
  // @@protoc_insertion_point(copy_constructor:exec.shared.SerializedField)
}

inline void SerializedField::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.child_){arena}
    , decltype(_impl_.major_type_){nullptr}
    , decltype(_impl_.name_part_){nullptr}
    , decltype(_impl_.value_count_) { 0 }

    , decltype(_impl_.var_byte_length_) { 0 }

    , decltype(_impl_.buffer_length_) { 0 }

  };
}

SerializedField::~SerializedField() {
  // @@protoc_insertion_point(destructor:exec.shared.SerializedField)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SerializedField::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.child_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.major_type_;
  if (this != internal_default_instance()) delete _impl_.name_part_;
}

void SerializedField::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SerializedField::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.shared.SerializedField)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.child_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.major_type_ != nullptr);
      _impl_.major_type_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.name_part_ != nullptr);
      _impl_.name_part_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.value_count_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.buffer_length_) -
        reinterpret_cast<char*>(&_impl_.value_count_)) + sizeof(_impl_.buffer_length_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedField::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .common.MajorType major_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_major_type(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .exec.shared.NamePart name_part = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_name_part(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .exec.shared.SerializedField child = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_child(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 value_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_value_count(&has_bits);
          _impl_.value_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 var_byte_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_var_byte_length(&has_bits);
          _impl_.var_byte_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 buffer_length = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_buffer_length(&has_bits);
          _impl_.buffer_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SerializedField::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.shared.SerializedField)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .common.MajorType major_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::major_type(this),
        _Internal::major_type(this).GetCachedSize(), target, stream);
  }

  // optional .exec.shared.NamePart name_part = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::name_part(this),
        _Internal::name_part(this).GetCachedSize(), target, stream);
  }

  // repeated .exec.shared.SerializedField child = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_child_size()); i < n; i++) {
    const auto& repfield = this->_internal_child(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 value_count = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_value_count(), target);
  }

  // optional int32 var_byte_length = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_var_byte_length(), target);
  }

  // optional int32 buffer_length = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        7, this->_internal_buffer_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.shared.SerializedField)
  return target;
}

::size_t SerializedField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.shared.SerializedField)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .exec.shared.SerializedField child = 3;
  total_size += 1UL * this->_internal_child_size();
  for (const auto& msg : this->_impl_.child_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .common.MajorType major_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.major_type_);
    }

    // optional .exec.shared.NamePart name_part = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.name_part_);
    }

    // optional int32 value_count = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_value_count());
    }

    // optional int32 var_byte_length = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_var_byte_length());
    }

    // optional int32 buffer_length = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_buffer_length());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SerializedField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SerializedField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SerializedField::GetClassData() const { return &_class_data_; }


void SerializedField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SerializedField*>(&to_msg);
  auto& from = static_cast<const SerializedField&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.shared.SerializedField)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.child_.MergeFrom(from._impl_.child_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_major_type()->::common::MajorType::MergeFrom(
          from._internal_major_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_name_part()->::exec::shared::NamePart::MergeFrom(
          from._internal_name_part());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.value_count_ = from._impl_.value_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.var_byte_length_ = from._impl_.var_byte_length_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.buffer_length_ = from._impl_.buffer_length_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SerializedField::CopyFrom(const SerializedField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.shared.SerializedField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedField::IsInitialized() const {
  return true;
}

void SerializedField::InternalSwap(SerializedField* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.child_.InternalSwap(&other->_impl_.child_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SerializedField, _impl_.buffer_length_)
      + sizeof(SerializedField::_impl_.buffer_length_)
      - PROTOBUF_FIELD_OFFSET(SerializedField, _impl_.major_type_)>(
          reinterpret_cast<char*>(&_impl_.major_type_),
          reinterpret_cast<char*>(&other->_impl_.major_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserBitShared_2eproto_getter, &descriptor_table_UserBitShared_2eproto_once,
      file_level_metadata_UserBitShared_2eproto[8]);
}
// ===================================================================

class NodeStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<NodeStatus>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NodeStatus, _impl_._has_bits_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_memory_footprint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NodeStatus::NodeStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exec.shared.NodeStatus)
}
NodeStatus::NodeStatus(const NodeStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:exec.shared.NodeStatus)
}

inline void NodeStatus::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.memory_footprint_) { ::int64_t{0} }

    , decltype(_impl_.node_id_) { 0 }

  };
}

NodeStatus::~NodeStatus() {
  // @@protoc_insertion_point(destructor:exec.shared.NodeStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeStatus::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void NodeStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.shared.NodeStatus)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.memory_footprint_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.node_id_) -
        reinterpret_cast<char*>(&_impl_.memory_footprint_)) + sizeof(_impl_.node_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_node_id(&has_bits);
          _impl_.node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 memory_footprint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_memory_footprint(&has_bits);
          _impl_.memory_footprint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NodeStatus::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.shared.NodeStatus)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 node_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_node_id(), target);
  }

  // optional int64 memory_footprint = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_memory_footprint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.shared.NodeStatus)
  return target;
}

::size_t NodeStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.shared.NodeStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 memory_footprint = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_memory_footprint());
    }

    // optional int32 node_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_node_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeStatus::GetClassData() const { return &_class_data_; }


void NodeStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeStatus*>(&to_msg);
  auto& from = static_cast<const NodeStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.shared.NodeStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.memory_footprint_ = from._impl_.memory_footprint_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.node_id_ = from._impl_.node_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeStatus::CopyFrom(const NodeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.shared.NodeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStatus::IsInitialized() const {
  return true;
}

void NodeStatus::InternalSwap(NodeStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeStatus, _impl_.node_id_)
      + sizeof(NodeStatus::_impl_.node_id_)
      - PROTOBUF_FIELD_OFFSET(NodeStatus, _impl_.memory_footprint_)>(
          reinterpret_cast<char*>(&_impl_.memory_footprint_),
          reinterpret_cast<char*>(&other->_impl_.memory_footprint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserBitShared_2eproto_getter, &descriptor_table_UserBitShared_2eproto_once,
      file_level_metadata_UserBitShared_2eproto[9]);
}
// ===================================================================

class QueryResult::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryResult>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryResult, _impl_._has_bits_);
  static void set_has_query_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::exec::shared::QueryId& query_id(const QueryResult* msg);
  static void set_has_query_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::exec::shared::QueryId&
QueryResult::_Internal::query_id(const QueryResult* msg) {
  return *msg->_impl_.query_id_;
}
QueryResult::QueryResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exec.shared.QueryResult)
}
QueryResult::QueryResult(const QueryResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){from._impl_.error_}
    , decltype(_impl_.query_id_){nullptr}
    , decltype(_impl_.query_state_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.query_id_ = new ::exec::shared::QueryId(*from._impl_.query_id_);
  }
  _this->_impl_.query_state_ = from._impl_.query_state_;
  // @@protoc_insertion_point(copy_constructor:exec.shared.QueryResult)
}

inline void QueryResult::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){arena}
    , decltype(_impl_.query_id_){nullptr}
    , decltype(_impl_.query_state_) { 0 }

  };
}

QueryResult::~QueryResult() {
  // @@protoc_insertion_point(destructor:exec.shared.QueryResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryResult::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.query_id_;
}

void QueryResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryResult::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.shared.QueryResult)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.query_id_ != nullptr);
    _impl_.query_id_->Clear();
  }
  _impl_.query_state_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .exec.shared.QueryResult.QueryState query_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::exec::shared::QueryResult_QueryState_IsValid(static_cast<int>(val)))) {
            _internal_set_query_state(static_cast<::exec::shared::QueryResult_QueryState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .exec.shared.QueryId query_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_query_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .exec.shared.DrillPBError error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_error(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryResult::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.shared.QueryResult)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .exec.shared.QueryResult.QueryState query_state = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_query_state(), target);
  }

  // optional .exec.shared.QueryId query_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::query_id(this),
        _Internal::query_id(this).GetCachedSize(), target, stream);
  }

  // repeated .exec.shared.DrillPBError error = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_error_size()); i < n; i++) {
    const auto& repfield = this->_internal_error(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.shared.QueryResult)
  return target;
}

::size_t QueryResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.shared.QueryResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .exec.shared.DrillPBError error = 3;
  total_size += 1UL * this->_internal_error_size();
  for (const auto& msg : this->_impl_.error_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .exec.shared.QueryId query_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_id_);
    }

    // optional .exec.shared.QueryResult.QueryState query_state = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_query_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryResult::GetClassData() const { return &_class_data_; }


void QueryResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryResult*>(&to_msg);
  auto& from = static_cast<const QueryResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.shared.QueryResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.error_.MergeFrom(from._impl_.error_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_query_id()->::exec::shared::QueryId::MergeFrom(
          from._internal_query_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.query_state_ = from._impl_.query_state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryResult::CopyFrom(const QueryResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.shared.QueryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult::IsInitialized() const {
  return true;
}

void QueryResult::InternalSwap(QueryResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.error_.InternalSwap(&other->_impl_.error_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryResult, _impl_.query_state_)
      + sizeof(QueryResult::_impl_.query_state_)
      - PROTOBUF_FIELD_OFFSET(QueryResult, _impl_.query_id_)>(
          reinterpret_cast<char*>(&_impl_.query_id_),
          reinterpret_cast<char*>(&other->_impl_.query_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserBitShared_2eproto_getter, &descriptor_table_UserBitShared_2eproto_once,
      file_level_metadata_UserBitShared_2eproto[10]);
}
// ===================================================================

class QueryData::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryData, _impl_._has_bits_);
  static const ::exec::shared::QueryId& query_id(const QueryData* msg);
  static void set_has_query_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_row_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::exec::shared::RecordBatchDef& def(const QueryData* msg);
  static void set_has_def(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_affected_rows_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::exec::shared::QueryId&
QueryData::_Internal::query_id(const QueryData* msg) {
  return *msg->_impl_.query_id_;
}
const ::exec::shared::RecordBatchDef&
QueryData::_Internal::def(const QueryData* msg) {
  return *msg->_impl_.def_;
}
QueryData::QueryData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exec.shared.QueryData)
}
QueryData::QueryData(const QueryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_id_){nullptr}
    , decltype(_impl_.def_){nullptr}
    , decltype(_impl_.row_count_) {}

    , decltype(_impl_.affected_rows_count_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.query_id_ = new ::exec::shared::QueryId(*from._impl_.query_id_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.def_ = new ::exec::shared::RecordBatchDef(*from._impl_.def_);
  }
  ::memcpy(&_impl_.row_count_, &from._impl_.row_count_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.affected_rows_count_) -
    reinterpret_cast<char*>(&_impl_.row_count_)) + sizeof(_impl_.affected_rows_count_));
  // @@protoc_insertion_point(copy_constructor:exec.shared.QueryData)
}

inline void QueryData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_id_){nullptr}
    , decltype(_impl_.def_){nullptr}
    , decltype(_impl_.row_count_) { 0 }

    , decltype(_impl_.affected_rows_count_) { 0 }

  };
}

QueryData::~QueryData() {
  // @@protoc_insertion_point(destructor:exec.shared.QueryData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.query_id_;
  if (this != internal_default_instance()) delete _impl_.def_;
}

void QueryData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryData::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.shared.QueryData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.query_id_ != nullptr);
      _impl_.query_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.def_ != nullptr);
      _impl_.def_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.row_count_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.affected_rows_count_) -
        reinterpret_cast<char*>(&_impl_.row_count_)) + sizeof(_impl_.affected_rows_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .exec.shared.QueryId query_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_query_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 row_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_row_count(&has_bits);
          _impl_.row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .exec.shared.RecordBatchDef def = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_def(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 affected_rows_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_affected_rows_count(&has_bits);
          _impl_.affected_rows_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.shared.QueryData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .exec.shared.QueryId query_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::query_id(this),
        _Internal::query_id(this).GetCachedSize(), target, stream);
  }

  // optional int32 row_count = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_row_count(), target);
  }

  // optional .exec.shared.RecordBatchDef def = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::def(this),
        _Internal::def(this).GetCachedSize(), target, stream);
  }

  // optional int32 affected_rows_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_affected_rows_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.shared.QueryData)
  return target;
}

::size_t QueryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.shared.QueryData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .exec.shared.QueryId query_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_id_);
    }

    // optional .exec.shared.RecordBatchDef def = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.def_);
    }

    // optional int32 row_count = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_row_count());
    }

    // optional int32 affected_rows_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_affected_rows_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryData::GetClassData() const { return &_class_data_; }


void QueryData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryData*>(&to_msg);
  auto& from = static_cast<const QueryData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.shared.QueryData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_query_id()->::exec::shared::QueryId::MergeFrom(
          from._internal_query_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_def()->::exec::shared::RecordBatchDef::MergeFrom(
          from._internal_def());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.row_count_ = from._impl_.row_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.affected_rows_count_ = from._impl_.affected_rows_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryData::CopyFrom(const QueryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.shared.QueryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryData::IsInitialized() const {
  return true;
}

void QueryData::InternalSwap(QueryData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryData, _impl_.affected_rows_count_)
      + sizeof(QueryData::_impl_.affected_rows_count_)
      - PROTOBUF_FIELD_OFFSET(QueryData, _impl_.query_id_)>(
          reinterpret_cast<char*>(&_impl_.query_id_),
          reinterpret_cast<char*>(&other->_impl_.query_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserBitShared_2eproto_getter, &descriptor_table_UserBitShared_2eproto_once,
      file_level_metadata_UserBitShared_2eproto[11]);
}
// ===================================================================

class QueryInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryInfo, _impl_._has_bits_);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::exec::DrillbitEndpoint& foreman(const QueryInfo* msg);
  static void set_has_foreman(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_options_json(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_total_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_queue_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::exec::DrillbitEndpoint&
QueryInfo::_Internal::foreman(const QueryInfo* msg) {
  return *msg->_impl_.foreman_;
}
/*static*/ const ::_pbi::LazyString QueryInfo::Impl_::_i_give_permission_to_break_this_code_default_user_{
    {{"-", 1}},
    {nullptr},
};
void QueryInfo::clear_foreman() {
  if (_impl_.foreman_ != nullptr) _impl_.foreman_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
/*static*/ const ::_pbi::LazyString QueryInfo::Impl_::_i_give_permission_to_break_this_code_default_queue_name_{
    {{"-", 1}},
    {nullptr},
};
QueryInfo::QueryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exec.shared.QueryInfo)
}
QueryInfo::QueryInfo(const QueryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_) {}

    , decltype(_impl_.user_) {}

    , decltype(_impl_.options_json_) {}

    , decltype(_impl_.queue_name_) {}

    , decltype(_impl_.foreman_){nullptr}
    , decltype(_impl_.start_) {}

    , decltype(_impl_.total_cost_) {}

    , decltype(_impl_.state_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.query_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.query_.Set(from._internal_query(), _this->GetArenaForAllocation());
  }
  _impl_.user_.InitDefault();
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.user_.Set(from._internal_user(), _this->GetArenaForAllocation());
  }
  _impl_.options_json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.options_json_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.options_json_.Set(from._internal_options_json(), _this->GetArenaForAllocation());
  }
  _impl_.queue_name_.InitDefault();
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.queue_name_.Set(from._internal_queue_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.foreman_ = new ::exec::DrillbitEndpoint(*from._impl_.foreman_);
  }
  ::memcpy(&_impl_.start_, &from._impl_.start_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:exec.shared.QueryInfo)
}

inline void QueryInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_) {}

    , decltype(_impl_.user_) {}

    , decltype(_impl_.options_json_) {}

    , decltype(_impl_.queue_name_) {}

    , decltype(_impl_.foreman_){nullptr}
    , decltype(_impl_.start_) { ::int64_t{0} }

    , decltype(_impl_.total_cost_) { 0 }

    , decltype(_impl_.state_) { 0 }

  };
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.query_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_.InitDefault();
  _impl_.options_json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.options_json_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.queue_name_.InitDefault();
}

QueryInfo::~QueryInfo() {
  // @@protoc_insertion_point(destructor:exec.shared.QueryInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.query_.Destroy();
  _impl_.user_.Destroy();
  _impl_.options_json_.Destroy();
  _impl_.queue_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.foreman_;
}

void QueryInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.shared.QueryInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.query_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.user_.ClearToDefault(::exec::shared::QueryInfo::Impl_::_i_give_permission_to_break_this_code_default_user_, GetArenaForAllocation());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.options_json_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.queue_name_.ClearToDefault(::exec::shared::QueryInfo::Impl_::_i_give_permission_to_break_this_code_default_queue_name_, GetArenaForAllocation());
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.foreman_ != nullptr);
      _impl_.foreman_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.start_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.state_) -
        reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.QueryInfo.query");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_start(&has_bits);
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .exec.shared.QueryResult.QueryState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::exec::shared::QueryResult_QueryState_IsValid(static_cast<int>(val)))) {
            _internal_set_state(static_cast<::exec::shared::QueryResult_QueryState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string user = 4 [default = "-"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.QueryInfo.user");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .exec.DrillbitEndpoint foreman = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_foreman(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string options_json = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_options_json();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.QueryInfo.options_json");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double total_cost = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 57)) {
          _Internal::set_has_total_cost(&has_bits);
          _impl_.total_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string queue_name = 8 [default = "-"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_queue_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.QueryInfo.queue_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.shared.QueryInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string query = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_query();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.QueryInfo.query");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int64 start = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_start(), target);
  }

  // optional .exec.shared.QueryResult.QueryState state = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_state(), target);
  }

  // optional string user = 4 [default = "-"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_user();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.QueryInfo.user");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional .exec.DrillbitEndpoint foreman = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::foreman(this),
        _Internal::foreman(this).GetCachedSize(), target, stream);
  }

  // optional string options_json = 6;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_options_json();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.QueryInfo.options_json");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional double total_cost = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_total_cost(), target);
  }

  // optional string queue_name = 8 [default = "-"];
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_queue_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.QueryInfo.queue_name");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.shared.QueryInfo)
  return target;
}

::size_t QueryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.shared.QueryInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string query = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_query());
    }

    // optional string user = 4 [default = "-"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_user());
    }

    // optional string options_json = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_options_json());
    }

    // optional string queue_name = 8 [default = "-"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_queue_name());
    }

    // optional .exec.DrillbitEndpoint foreman = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.foreman_);
    }

    // optional int64 start = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_start());
    }

    // optional double total_cost = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 9;
    }

    // optional .exec.shared.QueryResult.QueryState state = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryInfo::GetClassData() const { return &_class_data_; }


void QueryInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryInfo*>(&to_msg);
  auto& from = static_cast<const QueryInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.shared.QueryInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_query(from._internal_query());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_user(from._internal_user());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_options_json(from._internal_options_json());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_queue_name(from._internal_queue_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_foreman()->::exec::DrillbitEndpoint::MergeFrom(
          from._internal_foreman());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.start_ = from._impl_.start_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.total_cost_ = from._impl_.total_cost_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryInfo::CopyFrom(const QueryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.shared.QueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryInfo::IsInitialized() const {
  return true;
}

void QueryInfo::InternalSwap(QueryInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.query_, lhs_arena,
                                       &other->_impl_.query_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_, lhs_arena,
                                       &other->_impl_.user_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.options_json_, lhs_arena,
                                       &other->_impl_.options_json_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.queue_name_, lhs_arena,
                                       &other->_impl_.queue_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryInfo, _impl_.state_)
      + sizeof(QueryInfo::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(QueryInfo, _impl_.foreman_)>(
          reinterpret_cast<char*>(&_impl_.foreman_),
          reinterpret_cast<char*>(&other->_impl_.foreman_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserBitShared_2eproto_getter, &descriptor_table_UserBitShared_2eproto_once,
      file_level_metadata_UserBitShared_2eproto[12]);
}
// ===================================================================

class QueryProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryProfile>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryProfile, _impl_._has_bits_);
  static const ::exec::shared::QueryId& id(const QueryProfile* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_plan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::exec::DrillbitEndpoint& foreman(const QueryProfile* msg);
  static void set_has_foreman(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_total_fragments(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_finished_fragments(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_verboseerror(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_error_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_error_node(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_options_json(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_planend(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_queuewaitend(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_total_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_queue_name(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_queryid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_autolimit(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

const ::exec::shared::QueryId&
QueryProfile::_Internal::id(const QueryProfile* msg) {
  return *msg->_impl_.id_;
}
const ::exec::DrillbitEndpoint&
QueryProfile::_Internal::foreman(const QueryProfile* msg) {
  return *msg->_impl_.foreman_;
}
void QueryProfile::clear_foreman() {
  if (_impl_.foreman_ != nullptr) _impl_.foreman_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
/*static*/ const ::_pbi::LazyString QueryProfile::Impl_::_i_give_permission_to_break_this_code_default_user_{
    {{"-", 1}},
    {nullptr},
};
/*static*/ const ::_pbi::LazyString QueryProfile::Impl_::_i_give_permission_to_break_this_code_default_queue_name_{
    {{"-", 1}},
    {nullptr},
};
QueryProfile::QueryProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exec.shared.QueryProfile)
}
QueryProfile::QueryProfile(const QueryProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fragment_profile_){from._impl_.fragment_profile_}
    , decltype(_impl_.query_) {}

    , decltype(_impl_.plan_) {}

    , decltype(_impl_.user_) {}

    , decltype(_impl_.error_) {}

    , decltype(_impl_.verboseerror_) {}

    , decltype(_impl_.error_id_) {}

    , decltype(_impl_.error_node_) {}

    , decltype(_impl_.options_json_) {}

    , decltype(_impl_.queue_name_) {}

    , decltype(_impl_.queryid_) {}

    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.foreman_){nullptr}
    , decltype(_impl_.start_) {}

    , decltype(_impl_.end_) {}

    , decltype(_impl_.state_) {}

    , decltype(_impl_.total_fragments_) {}

    , decltype(_impl_.finished_fragments_) {}

    , decltype(_impl_.autolimit_) {}

    , decltype(_impl_.planend_) {}

    , decltype(_impl_.queuewaitend_) {}

    , decltype(_impl_.total_cost_) {}

    , decltype(_impl_.type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.query_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.query_.Set(from._internal_query(), _this->GetArenaForAllocation());
  }
  _impl_.plan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.plan_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.plan_.Set(from._internal_plan(), _this->GetArenaForAllocation());
  }
  _impl_.user_.InitDefault();
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.user_.Set(from._internal_user(), _this->GetArenaForAllocation());
  }
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.error_.Set(from._internal_error(), _this->GetArenaForAllocation());
  }
  _impl_.verboseerror_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.verboseerror_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.verboseerror_.Set(from._internal_verboseerror(), _this->GetArenaForAllocation());
  }
  _impl_.error_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.error_id_.Set(from._internal_error_id(), _this->GetArenaForAllocation());
  }
  _impl_.error_node_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_node_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.error_node_.Set(from._internal_error_node(), _this->GetArenaForAllocation());
  }
  _impl_.options_json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.options_json_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000080u) != 0) {
    _this->_impl_.options_json_.Set(from._internal_options_json(), _this->GetArenaForAllocation());
  }
  _impl_.queue_name_.InitDefault();
  if ((from._impl_._has_bits_[0] & 0x00000100u) != 0) {
    _this->_impl_.queue_name_.Set(from._internal_queue_name(), _this->GetArenaForAllocation());
  }
  _impl_.queryid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.queryid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000200u) != 0) {
    _this->_impl_.queryid_.Set(from._internal_queryid(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000400u) != 0) {
    _this->_impl_.id_ = new ::exec::shared::QueryId(*from._impl_.id_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000800u) != 0) {
    _this->_impl_.foreman_ = new ::exec::DrillbitEndpoint(*from._impl_.foreman_);
  }
  ::memcpy(&_impl_.start_, &from._impl_.start_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:exec.shared.QueryProfile)
}

inline void QueryProfile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fragment_profile_){arena}
    , decltype(_impl_.query_) {}

    , decltype(_impl_.plan_) {}

    , decltype(_impl_.user_) {}

    , decltype(_impl_.error_) {}

    , decltype(_impl_.verboseerror_) {}

    , decltype(_impl_.error_id_) {}

    , decltype(_impl_.error_node_) {}

    , decltype(_impl_.options_json_) {}

    , decltype(_impl_.queue_name_) {}

    , decltype(_impl_.queryid_) {}

    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.foreman_){nullptr}
    , decltype(_impl_.start_) { ::int64_t{0} }

    , decltype(_impl_.end_) { ::int64_t{0} }

    , decltype(_impl_.state_) { 0 }

    , decltype(_impl_.total_fragments_) { 0 }

    , decltype(_impl_.finished_fragments_) { 0 }

    , decltype(_impl_.autolimit_) { 0 }

    , decltype(_impl_.planend_) { ::int64_t{0} }

    , decltype(_impl_.queuewaitend_) { ::int64_t{0} }

    , decltype(_impl_.total_cost_) { 0 }

    , decltype(_impl_.type_) { 1 }

  };
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.query_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.plan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.plan_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_.InitDefault();
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verboseerror_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.verboseerror_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_node_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_node_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.options_json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.options_json_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.queue_name_.InitDefault();
  _impl_.queryid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.queryid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryProfile::~QueryProfile() {
  // @@protoc_insertion_point(destructor:exec.shared.QueryProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryProfile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fragment_profile_.~RepeatedPtrField();
  _impl_.query_.Destroy();
  _impl_.plan_.Destroy();
  _impl_.user_.Destroy();
  _impl_.error_.Destroy();
  _impl_.verboseerror_.Destroy();
  _impl_.error_id_.Destroy();
  _impl_.error_node_.Destroy();
  _impl_.options_json_.Destroy();
  _impl_.queue_name_.Destroy();
  _impl_.queryid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.id_;
  if (this != internal_default_instance()) delete _impl_.foreman_;
}

void QueryProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.shared.QueryProfile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fragment_profile_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.query_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.plan_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.user_.ClearToDefault(::exec::shared::QueryProfile::Impl_::_i_give_permission_to_break_this_code_default_user_, GetArenaForAllocation());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.error_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.verboseerror_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.error_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.error_node_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.options_json_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.queue_name_.ClearToDefault(::exec::shared::QueryProfile::Impl_::_i_give_permission_to_break_this_code_default_queue_name_, GetArenaForAllocation());
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.queryid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.id_ != nullptr);
      _impl_.id_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.foreman_ != nullptr);
      _impl_.foreman_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f000u) {
    ::memset(&_impl_.start_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.total_fragments_) -
        reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.total_fragments_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&_impl_.finished_fragments_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.total_cost_) -
        reinterpret_cast<char*>(&_impl_.finished_fragments_)) + sizeof(_impl_.total_cost_));
    _impl_.type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .exec.shared.QueryId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .exec.shared.QueryType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::exec::shared::QueryType_IsValid(static_cast<int>(val)))) {
            _internal_set_type(static_cast<::exec::shared::QueryType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_start(&has_bits);
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_end(&has_bits);
          _impl_.end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string query = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_query();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.QueryProfile.query");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string plan = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_plan();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.QueryProfile.plan");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .exec.DrillbitEndpoint foreman = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_foreman(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .exec.shared.QueryResult.QueryState state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::exec::shared::QueryResult_QueryState_IsValid(static_cast<int>(val)))) {
            _internal_set_state(static_cast<::exec::shared::QueryResult_QueryState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 total_fragments = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_total_fragments(&has_bits);
          _impl_.total_fragments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 finished_fragments = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_finished_fragments(&has_bits);
          _impl_.finished_fragments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .exec.shared.MajorFragmentProfile fragment_profile = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fragment_profile(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string user = 12 [default = "-"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.QueryProfile.user");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string error = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.QueryProfile.error");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string verboseError = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_verboseerror();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.QueryProfile.verboseError");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string error_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_error_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.QueryProfile.error_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string error_node = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_error_node();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.QueryProfile.error_node");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string options_json = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_options_json();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.QueryProfile.options_json");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 planEnd = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _Internal::set_has_planend(&has_bits);
          _impl_.planend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 queueWaitEnd = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 152)) {
          _Internal::set_has_queuewaitend(&has_bits);
          _impl_.queuewaitend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double total_cost = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 161)) {
          _Internal::set_has_total_cost(&has_bits);
          _impl_.total_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string queue_name = 21 [default = "-"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_queue_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.QueryProfile.queue_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string queryId = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_queryid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.QueryProfile.queryId");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 autoLimit = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 184)) {
          _Internal::set_has_autolimit(&has_bits);
          _impl_.autolimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryProfile::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.shared.QueryProfile)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .exec.shared.QueryId id = 1;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // optional .exec.shared.QueryType type = 2;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type(), target);
  }

  // optional int64 start = 3;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_start(), target);
  }

  // optional int64 end = 4;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_end(), target);
  }

  // optional string query = 5;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_query();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.QueryProfile.query");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional string plan = 6;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_plan();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.QueryProfile.plan");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional .exec.DrillbitEndpoint foreman = 7;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::foreman(this),
        _Internal::foreman(this).GetCachedSize(), target, stream);
  }

  // optional .exec.shared.QueryResult.QueryState state = 8;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_state(), target);
  }

  // optional int32 total_fragments = 9;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        9, this->_internal_total_fragments(), target);
  }

  // optional int32 finished_fragments = 10;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        10, this->_internal_finished_fragments(), target);
  }

  // repeated .exec.shared.MajorFragmentProfile fragment_profile = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fragment_profile_size()); i < n; i++) {
    const auto& repfield = this->_internal_fragment_profile(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string user = 12 [default = "-"];
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_user();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.QueryProfile.user");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // optional string error = 13;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_error();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.QueryProfile.error");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // optional string verboseError = 14;
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_verboseerror();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.QueryProfile.verboseError");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // optional string error_id = 15;
  if (cached_has_bits & 0x00000020u) {
    const std::string& _s = this->_internal_error_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.QueryProfile.error_id");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // optional string error_node = 16;
  if (cached_has_bits & 0x00000040u) {
    const std::string& _s = this->_internal_error_node();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.QueryProfile.error_node");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  // optional string options_json = 17;
  if (cached_has_bits & 0x00000080u) {
    const std::string& _s = this->_internal_options_json();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.QueryProfile.options_json");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  // optional int64 planEnd = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        18, this->_internal_planend(), target);
  }

  // optional int64 queueWaitEnd = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        19, this->_internal_queuewaitend(), target);
  }

  // optional double total_cost = 20;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        20, this->_internal_total_cost(), target);
  }

  // optional string queue_name = 21 [default = "-"];
  if (cached_has_bits & 0x00000100u) {
    const std::string& _s = this->_internal_queue_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.QueryProfile.queue_name");
    target = stream->WriteStringMaybeAliased(21, _s, target);
  }

  // optional string queryId = 22;
  if (cached_has_bits & 0x00000200u) {
    const std::string& _s = this->_internal_queryid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.QueryProfile.queryId");
    target = stream->WriteStringMaybeAliased(22, _s, target);
  }

  // optional int32 autoLimit = 23;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        23, this->_internal_autolimit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.shared.QueryProfile)
  return target;
}

::size_t QueryProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.shared.QueryProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .exec.shared.MajorFragmentProfile fragment_profile = 11;
  total_size += 1UL * this->_internal_fragment_profile_size();
  for (const auto& msg : this->_impl_.fragment_profile_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string query = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_query());
    }

    // optional string plan = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_plan());
    }

    // optional string user = 12 [default = "-"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_user());
    }

    // optional string error = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_error());
    }

    // optional string verboseError = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_verboseerror());
    }

    // optional string error_id = 15;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_error_id());
    }

    // optional string error_node = 16;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_error_node());
    }

    // optional string options_json = 17;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_options_json());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string queue_name = 21 [default = "-"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_queue_name());
    }

    // optional string queryId = 22;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_queryid());
    }

    // optional .exec.shared.QueryId id = 1;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.id_);
    }

    // optional .exec.DrillbitEndpoint foreman = 7;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.foreman_);
    }

    // optional int64 start = 3;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_start());
    }

    // optional int64 end = 4;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_end());
    }

    // optional .exec.shared.QueryResult.QueryState state = 8;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional int32 total_fragments = 9;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_total_fragments());
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional int32 finished_fragments = 10;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_finished_fragments());
    }

    // optional int32 autoLimit = 23;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_autolimit());
    }

    // optional int64 planEnd = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                      this->_internal_planend());
    }

    // optional int64 queueWaitEnd = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                      this->_internal_queuewaitend());
    }

    // optional double total_cost = 20;
    if (cached_has_bits & 0x00100000u) {
      total_size += 10;
    }

    // optional .exec.shared.QueryType type = 2;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryProfile::GetClassData() const { return &_class_data_; }


void QueryProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryProfile*>(&to_msg);
  auto& from = static_cast<const QueryProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.shared.QueryProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fragment_profile_.MergeFrom(from._impl_.fragment_profile_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_query(from._internal_query());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_plan(from._internal_plan());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_user(from._internal_user());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_error(from._internal_error());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_verboseerror(from._internal_verboseerror());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_error_id(from._internal_error_id());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_error_node(from._internal_error_node());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_options_json(from._internal_options_json());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_queue_name(from._internal_queue_name());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_queryid(from._internal_queryid());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_id()->::exec::shared::QueryId::MergeFrom(
          from._internal_id());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_foreman()->::exec::DrillbitEndpoint::MergeFrom(
          from._internal_foreman());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.start_ = from._impl_.start_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.end_ = from._impl_.end_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.total_fragments_ = from._impl_.total_fragments_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.finished_fragments_ = from._impl_.finished_fragments_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.autolimit_ = from._impl_.autolimit_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.planend_ = from._impl_.planend_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.queuewaitend_ = from._impl_.queuewaitend_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.total_cost_ = from._impl_.total_cost_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryProfile::CopyFrom(const QueryProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.shared.QueryProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryProfile::IsInitialized() const {
  return true;
}

void QueryProfile::InternalSwap(QueryProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.fragment_profile_.InternalSwap(&other->_impl_.fragment_profile_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.query_, lhs_arena,
                                       &other->_impl_.query_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.plan_, lhs_arena,
                                       &other->_impl_.plan_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_, lhs_arena,
                                       &other->_impl_.user_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_, lhs_arena,
                                       &other->_impl_.error_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.verboseerror_, lhs_arena,
                                       &other->_impl_.verboseerror_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_id_, lhs_arena,
                                       &other->_impl_.error_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_node_, lhs_arena,
                                       &other->_impl_.error_node_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.options_json_, lhs_arena,
                                       &other->_impl_.options_json_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.queue_name_, lhs_arena,
                                       &other->_impl_.queue_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.queryid_, lhs_arena,
                                       &other->_impl_.queryid_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryProfile, _impl_.type_)
      + sizeof(QueryProfile::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(QueryProfile, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserBitShared_2eproto_getter, &descriptor_table_UserBitShared_2eproto_once,
      file_level_metadata_UserBitShared_2eproto[13]);
}
// ===================================================================

class MajorFragmentProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<MajorFragmentProfile>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MajorFragmentProfile, _impl_._has_bits_);
  static void set_has_major_fragment_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MajorFragmentProfile::MajorFragmentProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exec.shared.MajorFragmentProfile)
}
MajorFragmentProfile::MajorFragmentProfile(const MajorFragmentProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MajorFragmentProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.minor_fragment_profile_){from._impl_.minor_fragment_profile_}
    , decltype(_impl_.major_fragment_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.major_fragment_id_ = from._impl_.major_fragment_id_;
  // @@protoc_insertion_point(copy_constructor:exec.shared.MajorFragmentProfile)
}

inline void MajorFragmentProfile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.minor_fragment_profile_){arena}
    , decltype(_impl_.major_fragment_id_) { 0 }

  };
}

MajorFragmentProfile::~MajorFragmentProfile() {
  // @@protoc_insertion_point(destructor:exec.shared.MajorFragmentProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MajorFragmentProfile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.minor_fragment_profile_.~RepeatedPtrField();
}

void MajorFragmentProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MajorFragmentProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.shared.MajorFragmentProfile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.minor_fragment_profile_.Clear();
  _impl_.major_fragment_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MajorFragmentProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 major_fragment_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_major_fragment_id(&has_bits);
          _impl_.major_fragment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .exec.shared.MinorFragmentProfile minor_fragment_profile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_minor_fragment_profile(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MajorFragmentProfile::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.shared.MajorFragmentProfile)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 major_fragment_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_major_fragment_id(), target);
  }

  // repeated .exec.shared.MinorFragmentProfile minor_fragment_profile = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_minor_fragment_profile_size()); i < n; i++) {
    const auto& repfield = this->_internal_minor_fragment_profile(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.shared.MajorFragmentProfile)
  return target;
}

::size_t MajorFragmentProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.shared.MajorFragmentProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .exec.shared.MinorFragmentProfile minor_fragment_profile = 2;
  total_size += 1UL * this->_internal_minor_fragment_profile_size();
  for (const auto& msg : this->_impl_.minor_fragment_profile_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 major_fragment_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_major_fragment_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MajorFragmentProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MajorFragmentProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MajorFragmentProfile::GetClassData() const { return &_class_data_; }


void MajorFragmentProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MajorFragmentProfile*>(&to_msg);
  auto& from = static_cast<const MajorFragmentProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.shared.MajorFragmentProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.minor_fragment_profile_.MergeFrom(from._impl_.minor_fragment_profile_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_major_fragment_id(from._internal_major_fragment_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MajorFragmentProfile::CopyFrom(const MajorFragmentProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.shared.MajorFragmentProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MajorFragmentProfile::IsInitialized() const {
  return true;
}

void MajorFragmentProfile::InternalSwap(MajorFragmentProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.minor_fragment_profile_.InternalSwap(&other->_impl_.minor_fragment_profile_);

  swap(_impl_.major_fragment_id_, other->_impl_.major_fragment_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MajorFragmentProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserBitShared_2eproto_getter, &descriptor_table_UserBitShared_2eproto_once,
      file_level_metadata_UserBitShared_2eproto[14]);
}
// ===================================================================

class MinorFragmentProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<MinorFragmentProfile>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MinorFragmentProfile, _impl_._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::exec::shared::DrillPBError& error(const MinorFragmentProfile* msg);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minor_fragment_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_memory_used(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_memory_used(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::exec::DrillbitEndpoint& endpoint(const MinorFragmentProfile* msg);
  static void set_has_endpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_update(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_last_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::exec::shared::DrillPBError&
MinorFragmentProfile::_Internal::error(const MinorFragmentProfile* msg) {
  return *msg->_impl_.error_;
}
const ::exec::DrillbitEndpoint&
MinorFragmentProfile::_Internal::endpoint(const MinorFragmentProfile* msg) {
  return *msg->_impl_.endpoint_;
}
void MinorFragmentProfile::clear_endpoint() {
  if (_impl_.endpoint_ != nullptr) _impl_.endpoint_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MinorFragmentProfile::MinorFragmentProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exec.shared.MinorFragmentProfile)
}
MinorFragmentProfile::MinorFragmentProfile(const MinorFragmentProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MinorFragmentProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operator_profile_){from._impl_.operator_profile_}
    , decltype(_impl_.error_){nullptr}
    , decltype(_impl_.endpoint_){nullptr}
    , decltype(_impl_.state_) {}

    , decltype(_impl_.minor_fragment_id_) {}

    , decltype(_impl_.start_time_) {}

    , decltype(_impl_.end_time_) {}

    , decltype(_impl_.memory_used_) {}

    , decltype(_impl_.max_memory_used_) {}

    , decltype(_impl_.last_update_) {}

    , decltype(_impl_.last_progress_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.error_ = new ::exec::shared::DrillPBError(*from._impl_.error_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.endpoint_ = new ::exec::DrillbitEndpoint(*from._impl_.endpoint_);
  }
  ::memcpy(&_impl_.state_, &from._impl_.state_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.last_progress_) -
    reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.last_progress_));
  // @@protoc_insertion_point(copy_constructor:exec.shared.MinorFragmentProfile)
}

inline void MinorFragmentProfile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operator_profile_){arena}
    , decltype(_impl_.error_){nullptr}
    , decltype(_impl_.endpoint_){nullptr}
    , decltype(_impl_.state_) { 0 }

    , decltype(_impl_.minor_fragment_id_) { 0 }

    , decltype(_impl_.start_time_) { ::int64_t{0} }

    , decltype(_impl_.end_time_) { ::int64_t{0} }

    , decltype(_impl_.memory_used_) { ::int64_t{0} }

    , decltype(_impl_.max_memory_used_) { ::int64_t{0} }

    , decltype(_impl_.last_update_) { ::int64_t{0} }

    , decltype(_impl_.last_progress_) { ::int64_t{0} }

  };
}

MinorFragmentProfile::~MinorFragmentProfile() {
  // @@protoc_insertion_point(destructor:exec.shared.MinorFragmentProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MinorFragmentProfile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operator_profile_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.error_;
  if (this != internal_default_instance()) delete _impl_.endpoint_;
}

void MinorFragmentProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MinorFragmentProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.shared.MinorFragmentProfile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operator_profile_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.error_ != nullptr);
      _impl_.error_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.endpoint_ != nullptr);
      _impl_.endpoint_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.state_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.max_memory_used_) -
        reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.max_memory_used_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.last_update_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.last_progress_) -
        reinterpret_cast<char*>(&_impl_.last_update_)) + sizeof(_impl_.last_progress_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MinorFragmentProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .exec.shared.FragmentState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::exec::shared::FragmentState_IsValid(static_cast<int>(val)))) {
            _internal_set_state(static_cast<::exec::shared::FragmentState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .exec.shared.DrillPBError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 minor_fragment_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_minor_fragment_id(&has_bits);
          _impl_.minor_fragment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .exec.shared.OperatorProfile operator_profile = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operator_profile(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_start_time(&has_bits);
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 end_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_end_time(&has_bits);
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 memory_used = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_memory_used(&has_bits);
          _impl_.memory_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 max_memory_used = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_max_memory_used(&has_bits);
          _impl_.max_memory_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .exec.DrillbitEndpoint endpoint = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpoint(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 last_update = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_last_update(&has_bits);
          _impl_.last_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 last_progress = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_last_progress(&has_bits);
          _impl_.last_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MinorFragmentProfile::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.shared.MinorFragmentProfile)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .exec.shared.FragmentState state = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_state(), target);
  }

  // optional .exec.shared.DrillPBError error = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // optional int32 minor_fragment_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_minor_fragment_id(), target);
  }

  // repeated .exec.shared.OperatorProfile operator_profile = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_operator_profile_size()); i < n; i++) {
    const auto& repfield = this->_internal_operator_profile(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int64 start_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_start_time(), target);
  }

  // optional int64 end_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_end_time(), target);
  }

  // optional int64 memory_used = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        7, this->_internal_memory_used(), target);
  }

  // optional int64 max_memory_used = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        8, this->_internal_max_memory_used(), target);
  }

  // optional .exec.DrillbitEndpoint endpoint = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::endpoint(this),
        _Internal::endpoint(this).GetCachedSize(), target, stream);
  }

  // optional int64 last_update = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        10, this->_internal_last_update(), target);
  }

  // optional int64 last_progress = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        11, this->_internal_last_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.shared.MinorFragmentProfile)
  return target;
}

::size_t MinorFragmentProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.shared.MinorFragmentProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .exec.shared.OperatorProfile operator_profile = 4;
  total_size += 1UL * this->_internal_operator_profile_size();
  for (const auto& msg : this->_impl_.operator_profile_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .exec.shared.DrillPBError error = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.error_);
    }

    // optional .exec.DrillbitEndpoint endpoint = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.endpoint_);
    }

    // optional .exec.shared.FragmentState state = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional int32 minor_fragment_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_minor_fragment_id());
    }

    // optional int64 start_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_start_time());
    }

    // optional int64 end_time = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_end_time());
    }

    // optional int64 memory_used = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_memory_used());
    }

    // optional int64 max_memory_used = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_max_memory_used());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int64 last_update = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_last_update());
    }

    // optional int64 last_progress = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_last_progress());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MinorFragmentProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MinorFragmentProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MinorFragmentProfile::GetClassData() const { return &_class_data_; }


void MinorFragmentProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MinorFragmentProfile*>(&to_msg);
  auto& from = static_cast<const MinorFragmentProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.shared.MinorFragmentProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.operator_profile_.MergeFrom(from._impl_.operator_profile_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_error()->::exec::shared::DrillPBError::MergeFrom(
          from._internal_error());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_endpoint()->::exec::DrillbitEndpoint::MergeFrom(
          from._internal_endpoint());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.minor_fragment_id_ = from._impl_.minor_fragment_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.start_time_ = from._impl_.start_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.end_time_ = from._impl_.end_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.memory_used_ = from._impl_.memory_used_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.max_memory_used_ = from._impl_.max_memory_used_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.last_update_ = from._impl_.last_update_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.last_progress_ = from._impl_.last_progress_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MinorFragmentProfile::CopyFrom(const MinorFragmentProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.shared.MinorFragmentProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinorFragmentProfile::IsInitialized() const {
  return true;
}

void MinorFragmentProfile::InternalSwap(MinorFragmentProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.operator_profile_.InternalSwap(&other->_impl_.operator_profile_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MinorFragmentProfile, _impl_.last_progress_)
      + sizeof(MinorFragmentProfile::_impl_.last_progress_)
      - PROTOBUF_FIELD_OFFSET(MinorFragmentProfile, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MinorFragmentProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserBitShared_2eproto_getter, &descriptor_table_UserBitShared_2eproto_once,
      file_level_metadata_UserBitShared_2eproto[15]);
}
// ===================================================================

class OperatorProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<OperatorProfile>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OperatorProfile, _impl_._has_bits_);
  static void set_has_operator_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_operator_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_setup_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_process_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_peak_local_memory_allocated(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_wait_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_operator_type_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OperatorProfile::OperatorProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exec.shared.OperatorProfile)
}
OperatorProfile::OperatorProfile(const OperatorProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperatorProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_profile_){from._impl_.input_profile_}
    , decltype(_impl_.metric_){from._impl_.metric_}
    , decltype(_impl_.operator_type_name_) {}

    , decltype(_impl_.operator_id_) {}

    , decltype(_impl_.operator_type_) {}

    , decltype(_impl_.setup_nanos_) {}

    , decltype(_impl_.process_nanos_) {}

    , decltype(_impl_.peak_local_memory_allocated_) {}

    , decltype(_impl_.wait_nanos_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.operator_type_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operator_type_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.operator_type_name_.Set(from._internal_operator_type_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.operator_id_, &from._impl_.operator_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.wait_nanos_) -
    reinterpret_cast<char*>(&_impl_.operator_id_)) + sizeof(_impl_.wait_nanos_));
  // @@protoc_insertion_point(copy_constructor:exec.shared.OperatorProfile)
}

inline void OperatorProfile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_profile_){arena}
    , decltype(_impl_.metric_){arena}
    , decltype(_impl_.operator_type_name_) {}

    , decltype(_impl_.operator_id_) { 0 }

    , decltype(_impl_.operator_type_) { 0 }

    , decltype(_impl_.setup_nanos_) { ::int64_t{0} }

    , decltype(_impl_.process_nanos_) { ::int64_t{0} }

    , decltype(_impl_.peak_local_memory_allocated_) { ::int64_t{0} }

    , decltype(_impl_.wait_nanos_) { ::int64_t{0} }

  };
  _impl_.operator_type_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operator_type_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OperatorProfile::~OperatorProfile() {
  // @@protoc_insertion_point(destructor:exec.shared.OperatorProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperatorProfile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_profile_.~RepeatedPtrField();
  _impl_.metric_.~RepeatedPtrField();
  _impl_.operator_type_name_.Destroy();
}

void OperatorProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperatorProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.shared.OperatorProfile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_profile_.Clear();
  _impl_.metric_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.operator_type_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.operator_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.wait_nanos_) -
        reinterpret_cast<char*>(&_impl_.operator_id_)) + sizeof(_impl_.wait_nanos_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperatorProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .exec.shared.StreamProfile input_profile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_profile(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 operator_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_operator_id(&has_bits);
          _impl_.operator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 operator_type = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_operator_type(&has_bits);
          _impl_.operator_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 setup_nanos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_setup_nanos(&has_bits);
          _impl_.setup_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 process_nanos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_process_nanos(&has_bits);
          _impl_.process_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 peak_local_memory_allocated = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_peak_local_memory_allocated(&has_bits);
          _impl_.peak_local_memory_allocated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .exec.shared.MetricValue metric = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metric(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 wait_nanos = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_wait_nanos(&has_bits);
          _impl_.wait_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string operator_type_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_operator_type_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.OperatorProfile.operator_type_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OperatorProfile::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.shared.OperatorProfile)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .exec.shared.StreamProfile input_profile = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_input_profile_size()); i < n; i++) {
    const auto& repfield = this->_internal_input_profile(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 operator_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_operator_id(), target);
  }

  // optional int32 operator_type = 4 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_operator_type(), target);
  }

  // optional int64 setup_nanos = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_setup_nanos(), target);
  }

  // optional int64 process_nanos = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_process_nanos(), target);
  }

  // optional int64 peak_local_memory_allocated = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        7, this->_internal_peak_local_memory_allocated(), target);
  }

  // repeated .exec.shared.MetricValue metric = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metric_size()); i < n; i++) {
    const auto& repfield = this->_internal_metric(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int64 wait_nanos = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        9, this->_internal_wait_nanos(), target);
  }

  // optional string operator_type_name = 10;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_operator_type_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.OperatorProfile.operator_type_name");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.shared.OperatorProfile)
  return target;
}

::size_t OperatorProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.shared.OperatorProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .exec.shared.StreamProfile input_profile = 1;
  total_size += 1UL * this->_internal_input_profile_size();
  for (const auto& msg : this->_impl_.input_profile_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .exec.shared.MetricValue metric = 8;
  total_size += 1UL * this->_internal_metric_size();
  for (const auto& msg : this->_impl_.metric_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string operator_type_name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_operator_type_name());
    }

    // optional int32 operator_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_operator_id());
    }

    // optional int32 operator_type = 4 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_operator_type());
    }

    // optional int64 setup_nanos = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_setup_nanos());
    }

    // optional int64 process_nanos = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_process_nanos());
    }

    // optional int64 peak_local_memory_allocated = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_peak_local_memory_allocated());
    }

    // optional int64 wait_nanos = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_wait_nanos());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperatorProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperatorProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperatorProfile::GetClassData() const { return &_class_data_; }


void OperatorProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperatorProfile*>(&to_msg);
  auto& from = static_cast<const OperatorProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.shared.OperatorProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.input_profile_.MergeFrom(from._impl_.input_profile_);
  _this->_impl_.metric_.MergeFrom(from._impl_.metric_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_operator_type_name(from._internal_operator_type_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.operator_id_ = from._impl_.operator_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.operator_type_ = from._impl_.operator_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.setup_nanos_ = from._impl_.setup_nanos_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.process_nanos_ = from._impl_.process_nanos_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.peak_local_memory_allocated_ = from._impl_.peak_local_memory_allocated_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.wait_nanos_ = from._impl_.wait_nanos_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperatorProfile::CopyFrom(const OperatorProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.shared.OperatorProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatorProfile::IsInitialized() const {
  return true;
}

void OperatorProfile::InternalSwap(OperatorProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.input_profile_.InternalSwap(&other->_impl_.input_profile_);
  _impl_.metric_.InternalSwap(&other->_impl_.metric_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operator_type_name_, lhs_arena,
                                       &other->_impl_.operator_type_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperatorProfile, _impl_.wait_nanos_)
      + sizeof(OperatorProfile::_impl_.wait_nanos_)
      - PROTOBUF_FIELD_OFFSET(OperatorProfile, _impl_.operator_id_)>(
          reinterpret_cast<char*>(&_impl_.operator_id_),
          reinterpret_cast<char*>(&other->_impl_.operator_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperatorProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserBitShared_2eproto_getter, &descriptor_table_UserBitShared_2eproto_once,
      file_level_metadata_UserBitShared_2eproto[16]);
}
// ===================================================================

class StreamProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamProfile>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StreamProfile, _impl_._has_bits_);
  static void set_has_records(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_batches(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_schemas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

StreamProfile::StreamProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exec.shared.StreamProfile)
}
StreamProfile::StreamProfile(const StreamProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:exec.shared.StreamProfile)
}

inline void StreamProfile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.records_) { ::int64_t{0} }

    , decltype(_impl_.batches_) { ::int64_t{0} }

    , decltype(_impl_.schemas_) { ::int64_t{0} }

  };
}

StreamProfile::~StreamProfile() {
  // @@protoc_insertion_point(destructor:exec.shared.StreamProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamProfile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.shared.StreamProfile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.records_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.schemas_) -
        reinterpret_cast<char*>(&_impl_.records_)) + sizeof(_impl_.schemas_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 records = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_records(&has_bits);
          _impl_.records_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 batches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_batches(&has_bits);
          _impl_.batches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 schemas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_schemas(&has_bits);
          _impl_.schemas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamProfile::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.shared.StreamProfile)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 records = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_records(), target);
  }

  // optional int64 batches = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_batches(), target);
  }

  // optional int64 schemas = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_schemas(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.shared.StreamProfile)
  return target;
}

::size_t StreamProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.shared.StreamProfile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 records = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_records());
    }

    // optional int64 batches = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_batches());
    }

    // optional int64 schemas = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_schemas());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamProfile::GetClassData() const { return &_class_data_; }


void StreamProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamProfile*>(&to_msg);
  auto& from = static_cast<const StreamProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.shared.StreamProfile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.records_ = from._impl_.records_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.batches_ = from._impl_.batches_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.schemas_ = from._impl_.schemas_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamProfile::CopyFrom(const StreamProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.shared.StreamProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamProfile::IsInitialized() const {
  return true;
}

void StreamProfile::InternalSwap(StreamProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamProfile, _impl_.schemas_)
      + sizeof(StreamProfile::_impl_.schemas_)
      - PROTOBUF_FIELD_OFFSET(StreamProfile, _impl_.records_)>(
          reinterpret_cast<char*>(&_impl_.records_),
          reinterpret_cast<char*>(&other->_impl_.records_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserBitShared_2eproto_getter, &descriptor_table_UserBitShared_2eproto_once,
      file_level_metadata_UserBitShared_2eproto[17]);
}
// ===================================================================

class MetricValue::_Internal {
 public:
  using HasBits = decltype(std::declval<MetricValue>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MetricValue, _impl_._has_bits_);
  static void set_has_metric_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_long_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_double_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MetricValue::MetricValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exec.shared.MetricValue)
}
MetricValue::MetricValue(const MetricValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:exec.shared.MetricValue)
}

inline void MetricValue::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.long_value_) { ::int64_t{0} }

    , decltype(_impl_.double_value_) { 0 }

    , decltype(_impl_.metric_id_) { 0 }

  };
}

MetricValue::~MetricValue() {
  // @@protoc_insertion_point(destructor:exec.shared.MetricValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetricValue::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MetricValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetricValue::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.shared.MetricValue)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.long_value_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.metric_id_) -
        reinterpret_cast<char*>(&_impl_.long_value_)) + sizeof(_impl_.metric_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 metric_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_metric_id(&has_bits);
          _impl_.metric_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 long_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_long_value(&has_bits);
          _impl_.long_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double double_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _Internal::set_has_double_value(&has_bits);
          _impl_.double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MetricValue::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.shared.MetricValue)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 metric_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_metric_id(), target);
  }

  // optional int64 long_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_long_value(), target);
  }

  // optional double double_value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_double_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.shared.MetricValue)
  return target;
}

::size_t MetricValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.shared.MetricValue)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 long_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_long_value());
    }

    // optional double double_value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional int32 metric_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_metric_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetricValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricValue::GetClassData() const { return &_class_data_; }


void MetricValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetricValue*>(&to_msg);
  auto& from = static_cast<const MetricValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.shared.MetricValue)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.long_value_ = from._impl_.long_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.double_value_ = from._impl_.double_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.metric_id_ = from._impl_.metric_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricValue::CopyFrom(const MetricValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.shared.MetricValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricValue::IsInitialized() const {
  return true;
}

void MetricValue::InternalSwap(MetricValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricValue, _impl_.metric_id_)
      + sizeof(MetricValue::_impl_.metric_id_)
      - PROTOBUF_FIELD_OFFSET(MetricValue, _impl_.long_value_)>(
          reinterpret_cast<char*>(&_impl_.long_value_),
          reinterpret_cast<char*>(&other->_impl_.long_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserBitShared_2eproto_getter, &descriptor_table_UserBitShared_2eproto_once,
      file_level_metadata_UserBitShared_2eproto[18]);
}
// ===================================================================

class Registry::_Internal {
 public:
};

Registry::Registry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exec.shared.Registry)
}
Registry::Registry(const Registry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Registry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.jar_){from._impl_.jar_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:exec.shared.Registry)
}

inline void Registry::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.jar_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Registry::~Registry() {
  // @@protoc_insertion_point(destructor:exec.shared.Registry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Registry::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.jar_.~RepeatedPtrField();
}

void Registry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Registry::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.shared.Registry)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.jar_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Registry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .exec.shared.Jar jar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_jar(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Registry::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.shared.Registry)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .exec.shared.Jar jar = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_jar_size()); i < n; i++) {
    const auto& repfield = this->_internal_jar(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.shared.Registry)
  return target;
}

::size_t Registry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.shared.Registry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .exec.shared.Jar jar = 1;
  total_size += 1UL * this->_internal_jar_size();
  for (const auto& msg : this->_impl_.jar_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Registry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Registry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Registry::GetClassData() const { return &_class_data_; }


void Registry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Registry*>(&to_msg);
  auto& from = static_cast<const Registry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.shared.Registry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.jar_.MergeFrom(from._impl_.jar_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Registry::CopyFrom(const Registry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.shared.Registry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Registry::IsInitialized() const {
  return true;
}

void Registry::InternalSwap(Registry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.jar_.InternalSwap(&other->_impl_.jar_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Registry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserBitShared_2eproto_getter, &descriptor_table_UserBitShared_2eproto_once,
      file_level_metadata_UserBitShared_2eproto[19]);
}
// ===================================================================

class Jar::_Internal {
 public:
  using HasBits = decltype(std::declval<Jar>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Jar, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Jar::Jar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exec.shared.Jar)
}
Jar::Jar(const Jar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Jar* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.function_signature_){from._impl_.function_signature_}
    , decltype(_impl_.name_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:exec.shared.Jar)
}

inline void Jar::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.function_signature_){arena}
    , decltype(_impl_.name_) {}

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Jar::~Jar() {
  // @@protoc_insertion_point(destructor:exec.shared.Jar)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Jar::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.function_signature_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void Jar::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Jar::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.shared.Jar)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.function_signature_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Jar::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.Jar.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string function_signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_function_signature();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "exec.shared.Jar.function_signature");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Jar::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.shared.Jar)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.Jar.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string function_signature = 2;
  for (int i = 0, n = this->_internal_function_signature_size(); i < n; ++i) {
    const auto& s = this->_internal_function_signature(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.Jar.function_signature");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.shared.Jar)
  return target;
}

::size_t Jar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.shared.Jar)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string function_signature = 2;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.function_signature_.size());
  for (int i = 0, n = _impl_.function_signature_.size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(_impl_.function_signature_.Get(i));
  }

  // optional string name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Jar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Jar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Jar::GetClassData() const { return &_class_data_; }


void Jar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Jar*>(&to_msg);
  auto& from = static_cast<const Jar&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.shared.Jar)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.function_signature_.MergeFrom(from._impl_.function_signature_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Jar::CopyFrom(const Jar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.shared.Jar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Jar::IsInitialized() const {
  return true;
}

void Jar::InternalSwap(Jar* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.function_signature_.InternalSwap(&other->_impl_.function_signature_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Jar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserBitShared_2eproto_getter, &descriptor_table_UserBitShared_2eproto_once,
      file_level_metadata_UserBitShared_2eproto[20]);
}
// ===================================================================

class SaslMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<SaslMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SaslMessage, _impl_._has_bits_);
  static void set_has_mechanism(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SaslMessage::SaslMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exec.shared.SaslMessage)
}
SaslMessage::SaslMessage(const SaslMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SaslMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mechanism_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.status_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mechanism_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mechanism_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.mechanism_.Set(from._internal_mechanism(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:exec.shared.SaslMessage)
}

inline void SaslMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mechanism_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.status_) { 0 }

  };
  _impl_.mechanism_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mechanism_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SaslMessage::~SaslMessage() {
  // @@protoc_insertion_point(destructor:exec.shared.SaslMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SaslMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mechanism_.Destroy();
  _impl_.data_.Destroy();
}

void SaslMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SaslMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.shared.SaslMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.mechanism_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.data_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaslMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string mechanism = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mechanism();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.shared.SaslMessage.mechanism");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .exec.shared.SaslStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::exec::shared::SaslStatus_IsValid(static_cast<int>(val)))) {
            _internal_set_status(static_cast<::exec::shared::SaslStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SaslMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.shared.SaslMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string mechanism = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_mechanism();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "exec.shared.SaslMessage.mechanism");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // optional .exec.shared.SaslStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.shared.SaslMessage)
  return target;
}

::size_t SaslMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.shared.SaslMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string mechanism = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_mechanism());
    }

    // optional bytes data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_data());
    }

    // optional .exec.shared.SaslStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaslMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SaslMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaslMessage::GetClassData() const { return &_class_data_; }


void SaslMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SaslMessage*>(&to_msg);
  auto& from = static_cast<const SaslMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.shared.SaslMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_mechanism(from._internal_mechanism());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaslMessage::CopyFrom(const SaslMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.shared.SaslMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaslMessage::IsInitialized() const {
  return true;
}

void SaslMessage::InternalSwap(SaslMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mechanism_, lhs_arena,
                                       &other->_impl_.mechanism_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SaslMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserBitShared_2eproto_getter, &descriptor_table_UserBitShared_2eproto_once,
      file_level_metadata_UserBitShared_2eproto[21]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace shared
}  // namespace exec
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::exec::shared::UserCredentials*
Arena::CreateMaybeMessage< ::exec::shared::UserCredentials >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::shared::UserCredentials >(arena);
}
template<> PROTOBUF_NOINLINE ::exec::shared::QueryId*
Arena::CreateMaybeMessage< ::exec::shared::QueryId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::shared::QueryId >(arena);
}
template<> PROTOBUF_NOINLINE ::exec::shared::DrillPBError*
Arena::CreateMaybeMessage< ::exec::shared::DrillPBError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::shared::DrillPBError >(arena);
}
template<> PROTOBUF_NOINLINE ::exec::shared::ExceptionWrapper*
Arena::CreateMaybeMessage< ::exec::shared::ExceptionWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::shared::ExceptionWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::exec::shared::StackTraceElementWrapper*
Arena::CreateMaybeMessage< ::exec::shared::StackTraceElementWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::shared::StackTraceElementWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::exec::shared::ParsingError*
Arena::CreateMaybeMessage< ::exec::shared::ParsingError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::shared::ParsingError >(arena);
}
template<> PROTOBUF_NOINLINE ::exec::shared::RecordBatchDef*
Arena::CreateMaybeMessage< ::exec::shared::RecordBatchDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::shared::RecordBatchDef >(arena);
}
template<> PROTOBUF_NOINLINE ::exec::shared::NamePart*
Arena::CreateMaybeMessage< ::exec::shared::NamePart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::shared::NamePart >(arena);
}
template<> PROTOBUF_NOINLINE ::exec::shared::SerializedField*
Arena::CreateMaybeMessage< ::exec::shared::SerializedField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::shared::SerializedField >(arena);
}
template<> PROTOBUF_NOINLINE ::exec::shared::NodeStatus*
Arena::CreateMaybeMessage< ::exec::shared::NodeStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::shared::NodeStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::exec::shared::QueryResult*
Arena::CreateMaybeMessage< ::exec::shared::QueryResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::shared::QueryResult >(arena);
}
template<> PROTOBUF_NOINLINE ::exec::shared::QueryData*
Arena::CreateMaybeMessage< ::exec::shared::QueryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::shared::QueryData >(arena);
}
template<> PROTOBUF_NOINLINE ::exec::shared::QueryInfo*
Arena::CreateMaybeMessage< ::exec::shared::QueryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::shared::QueryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::exec::shared::QueryProfile*
Arena::CreateMaybeMessage< ::exec::shared::QueryProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::shared::QueryProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::exec::shared::MajorFragmentProfile*
Arena::CreateMaybeMessage< ::exec::shared::MajorFragmentProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::shared::MajorFragmentProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::exec::shared::MinorFragmentProfile*
Arena::CreateMaybeMessage< ::exec::shared::MinorFragmentProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::shared::MinorFragmentProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::exec::shared::OperatorProfile*
Arena::CreateMaybeMessage< ::exec::shared::OperatorProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::shared::OperatorProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::exec::shared::StreamProfile*
Arena::CreateMaybeMessage< ::exec::shared::StreamProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::shared::StreamProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::exec::shared::MetricValue*
Arena::CreateMaybeMessage< ::exec::shared::MetricValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::shared::MetricValue >(arena);
}
template<> PROTOBUF_NOINLINE ::exec::shared::Registry*
Arena::CreateMaybeMessage< ::exec::shared::Registry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::shared::Registry >(arena);
}
template<> PROTOBUF_NOINLINE ::exec::shared::Jar*
Arena::CreateMaybeMessage< ::exec::shared::Jar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::shared::Jar >(arena);
}
template<> PROTOBUF_NOINLINE ::exec::shared::SaslMessage*
Arena::CreateMaybeMessage< ::exec::shared::SaslMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::shared::SaslMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
