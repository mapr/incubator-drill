// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SchemaDef.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SchemaDef_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_SchemaDef_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "Types.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_SchemaDef_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SchemaDef_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_SchemaDef_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

namespace exec {
enum ValueMode : int {
  VALUE_VECTOR = 0,
  RLE = 1,
  DICT = 2,
};

bool ValueMode_IsValid(int value);
constexpr ValueMode ValueMode_MIN = static_cast<ValueMode>(0);
constexpr ValueMode ValueMode_MAX = static_cast<ValueMode>(2);
constexpr int ValueMode_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ValueMode_descriptor();
template <typename T>
const std::string& ValueMode_Name(T value) {
  static_assert(std::is_same<T, ValueMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ValueMode_Name().");
  return ValueMode_Name(static_cast<ValueMode>(value));
}
template <>
inline const std::string& ValueMode_Name(ValueMode value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ValueMode_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ValueMode_Parse(absl::string_view name, ValueMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ValueMode>(
      ValueMode_descriptor(), name, value);
}

// ===================================================================



// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace exec


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::exec::ValueMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::exec::ValueMode>() {
  return ::exec::ValueMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_SchemaDef_2eproto_2epb_2eh
