// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExecutionProtos.proto

#include "ExecutionProtos.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace exec {
namespace bit {
PROTOBUF_CONSTEXPR FragmentHandle::FragmentHandle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.query_id_)*/nullptr
  , /*decltype(_impl_.parent_query_id_)*/nullptr
  , /*decltype(_impl_.major_fragment_id_)*/0
  , /*decltype(_impl_.minor_fragment_id_)*/0} {}
struct FragmentHandleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FragmentHandleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FragmentHandleDefaultTypeInternal() {}
  union {
    FragmentHandle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FragmentHandleDefaultTypeInternal _FragmentHandle_default_instance_;
PROTOBUF_CONSTEXPR ServerPreparedStatementState::ServerPreparedStatementState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sql_query_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ServerPreparedStatementStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerPreparedStatementStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerPreparedStatementStateDefaultTypeInternal() {}
  union {
    ServerPreparedStatementState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerPreparedStatementStateDefaultTypeInternal _ServerPreparedStatementState_default_instance_;
}  // namespace bit
}  // namespace exec
static ::_pb::Metadata file_level_metadata_ExecutionProtos_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ExecutionProtos_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ExecutionProtos_2eproto = nullptr;

const uint32_t TableStruct_ExecutionProtos_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::exec::bit::FragmentHandle, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::exec::bit::FragmentHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::exec::bit::FragmentHandle, _impl_.query_id_),
  PROTOBUF_FIELD_OFFSET(::exec::bit::FragmentHandle, _impl_.major_fragment_id_),
  PROTOBUF_FIELD_OFFSET(::exec::bit::FragmentHandle, _impl_.minor_fragment_id_),
  PROTOBUF_FIELD_OFFSET(::exec::bit::FragmentHandle, _impl_.parent_query_id_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::exec::bit::ServerPreparedStatementState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::exec::bit::ServerPreparedStatementState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::exec::bit::ServerPreparedStatementState, _impl_.sql_query_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::exec::bit::FragmentHandle)},
  { 14, 21, -1, sizeof(::exec::bit::ServerPreparedStatementState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::exec::bit::_FragmentHandle_default_instance_._instance,
  &::exec::bit::_ServerPreparedStatementState_default_instance_._instance,
};

const char descriptor_table_protodef_ExecutionProtos_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025ExecutionProtos.proto\022\010exec.bit\032\022Coord"
  "ination.proto\032\023UserBitShared.proto\"\235\001\n\016F"
  "ragmentHandle\022&\n\010query_id\030\001 \001(\0132\024.exec.s"
  "hared.QueryId\022\031\n\021major_fragment_id\030\002 \001(\005"
  "\022\031\n\021minor_fragment_id\030\003 \001(\005\022-\n\017parent_qu"
  "ery_id\030\004 \001(\0132\024.exec.shared.QueryId\"1\n\034Se"
  "rverPreparedStatementState\022\021\n\tsql_query\030"
  "\001 \001(\tB+\n\033org.apache.drill.exec.protoB\nEx"
  "ecProtosH\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ExecutionProtos_2eproto_deps[2] = {
  &::descriptor_table_Coordination_2eproto,
  &::descriptor_table_UserBitShared_2eproto,
};
static ::_pbi::once_flag descriptor_table_ExecutionProtos_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ExecutionProtos_2eproto = {
    false, false, 330, descriptor_table_protodef_ExecutionProtos_2eproto,
    "ExecutionProtos.proto",
    &descriptor_table_ExecutionProtos_2eproto_once, descriptor_table_ExecutionProtos_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_ExecutionProtos_2eproto::offsets,
    file_level_metadata_ExecutionProtos_2eproto, file_level_enum_descriptors_ExecutionProtos_2eproto,
    file_level_service_descriptors_ExecutionProtos_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ExecutionProtos_2eproto_getter() {
  return &descriptor_table_ExecutionProtos_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ExecutionProtos_2eproto(&descriptor_table_ExecutionProtos_2eproto);
namespace exec {
namespace bit {

// ===================================================================

class FragmentHandle::_Internal {
 public:
  using HasBits = decltype(std::declval<FragmentHandle>()._impl_._has_bits_);
  static const ::exec::shared::QueryId& query_id(const FragmentHandle* msg);
  static void set_has_query_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_major_fragment_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_minor_fragment_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::exec::shared::QueryId& parent_query_id(const FragmentHandle* msg);
  static void set_has_parent_query_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::exec::shared::QueryId&
FragmentHandle::_Internal::query_id(const FragmentHandle* msg) {
  return *msg->_impl_.query_id_;
}
const ::exec::shared::QueryId&
FragmentHandle::_Internal::parent_query_id(const FragmentHandle* msg) {
  return *msg->_impl_.parent_query_id_;
}
void FragmentHandle::clear_query_id() {
  if (_impl_.query_id_ != nullptr) _impl_.query_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void FragmentHandle::clear_parent_query_id() {
  if (_impl_.parent_query_id_ != nullptr) _impl_.parent_query_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
FragmentHandle::FragmentHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:exec.bit.FragmentHandle)
}
FragmentHandle::FragmentHandle(const FragmentHandle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FragmentHandle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_id_){nullptr}
    , decltype(_impl_.parent_query_id_){nullptr}
    , decltype(_impl_.major_fragment_id_){}
    , decltype(_impl_.minor_fragment_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_query_id()) {
    _this->_impl_.query_id_ = new ::exec::shared::QueryId(*from._impl_.query_id_);
  }
  if (from._internal_has_parent_query_id()) {
    _this->_impl_.parent_query_id_ = new ::exec::shared::QueryId(*from._impl_.parent_query_id_);
  }
  ::memcpy(&_impl_.major_fragment_id_, &from._impl_.major_fragment_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.minor_fragment_id_) -
    reinterpret_cast<char*>(&_impl_.major_fragment_id_)) + sizeof(_impl_.minor_fragment_id_));
  // @@protoc_insertion_point(copy_constructor:exec.bit.FragmentHandle)
}

inline void FragmentHandle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_id_){nullptr}
    , decltype(_impl_.parent_query_id_){nullptr}
    , decltype(_impl_.major_fragment_id_){0}
    , decltype(_impl_.minor_fragment_id_){0}
  };
}

FragmentHandle::~FragmentHandle() {
  // @@protoc_insertion_point(destructor:exec.bit.FragmentHandle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FragmentHandle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.query_id_;
  if (this != internal_default_instance()) delete _impl_.parent_query_id_;
}

void FragmentHandle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FragmentHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.bit.FragmentHandle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.query_id_ != nullptr);
      _impl_.query_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.parent_query_id_ != nullptr);
      _impl_.parent_query_id_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.major_fragment_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.minor_fragment_id_) -
        reinterpret_cast<char*>(&_impl_.major_fragment_id_)) + sizeof(_impl_.minor_fragment_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FragmentHandle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .exec.shared.QueryId query_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_query_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 major_fragment_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_major_fragment_id(&has_bits);
          _impl_.major_fragment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 minor_fragment_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_minor_fragment_id(&has_bits);
          _impl_.minor_fragment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .exec.shared.QueryId parent_query_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent_query_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FragmentHandle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.bit.FragmentHandle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .exec.shared.QueryId query_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::query_id(this),
        _Internal::query_id(this).GetCachedSize(), target, stream);
  }

  // optional int32 major_fragment_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_major_fragment_id(), target);
  }

  // optional int32 minor_fragment_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_minor_fragment_id(), target);
  }

  // optional .exec.shared.QueryId parent_query_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::parent_query_id(this),
        _Internal::parent_query_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.bit.FragmentHandle)
  return target;
}

size_t FragmentHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.bit.FragmentHandle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .exec.shared.QueryId query_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_id_);
    }

    // optional .exec.shared.QueryId parent_query_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.parent_query_id_);
    }

    // optional int32 major_fragment_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_major_fragment_id());
    }

    // optional int32 minor_fragment_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_minor_fragment_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FragmentHandle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FragmentHandle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FragmentHandle::GetClassData() const { return &_class_data_; }


void FragmentHandle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FragmentHandle*>(&to_msg);
  auto& from = static_cast<const FragmentHandle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.bit.FragmentHandle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_query_id()->::exec::shared::QueryId::MergeFrom(
          from._internal_query_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_parent_query_id()->::exec::shared::QueryId::MergeFrom(
          from._internal_parent_query_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.major_fragment_id_ = from._impl_.major_fragment_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.minor_fragment_id_ = from._impl_.minor_fragment_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FragmentHandle::CopyFrom(const FragmentHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.bit.FragmentHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FragmentHandle::IsInitialized() const {
  return true;
}

void FragmentHandle::InternalSwap(FragmentHandle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FragmentHandle, _impl_.minor_fragment_id_)
      + sizeof(FragmentHandle::_impl_.minor_fragment_id_)
      - PROTOBUF_FIELD_OFFSET(FragmentHandle, _impl_.query_id_)>(
          reinterpret_cast<char*>(&_impl_.query_id_),
          reinterpret_cast<char*>(&other->_impl_.query_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FragmentHandle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ExecutionProtos_2eproto_getter, &descriptor_table_ExecutionProtos_2eproto_once,
      file_level_metadata_ExecutionProtos_2eproto[0]);
}

// ===================================================================

class ServerPreparedStatementState::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerPreparedStatementState>()._impl_._has_bits_);
  static void set_has_sql_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ServerPreparedStatementState::ServerPreparedStatementState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:exec.bit.ServerPreparedStatementState)
}
ServerPreparedStatementState::ServerPreparedStatementState(const ServerPreparedStatementState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerPreparedStatementState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sql_query_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sql_query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sql_query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sql_query()) {
    _this->_impl_.sql_query_.Set(from._internal_sql_query(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:exec.bit.ServerPreparedStatementState)
}

inline void ServerPreparedStatementState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sql_query_){}
  };
  _impl_.sql_query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sql_query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerPreparedStatementState::~ServerPreparedStatementState() {
  // @@protoc_insertion_point(destructor:exec.bit.ServerPreparedStatementState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerPreparedStatementState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sql_query_.Destroy();
}

void ServerPreparedStatementState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerPreparedStatementState::Clear() {
// @@protoc_insertion_point(message_clear_start:exec.bit.ServerPreparedStatementState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.sql_query_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerPreparedStatementState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string sql_query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sql_query();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "exec.bit.ServerPreparedStatementState.sql_query");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerPreparedStatementState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exec.bit.ServerPreparedStatementState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string sql_query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sql_query().data(), static_cast<int>(this->_internal_sql_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "exec.bit.ServerPreparedStatementState.sql_query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sql_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exec.bit.ServerPreparedStatementState)
  return target;
}

size_t ServerPreparedStatementState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exec.bit.ServerPreparedStatementState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string sql_query = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sql_query());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerPreparedStatementState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerPreparedStatementState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerPreparedStatementState::GetClassData() const { return &_class_data_; }


void ServerPreparedStatementState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerPreparedStatementState*>(&to_msg);
  auto& from = static_cast<const ServerPreparedStatementState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exec.bit.ServerPreparedStatementState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sql_query()) {
    _this->_internal_set_sql_query(from._internal_sql_query());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerPreparedStatementState::CopyFrom(const ServerPreparedStatementState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exec.bit.ServerPreparedStatementState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerPreparedStatementState::IsInitialized() const {
  return true;
}

void ServerPreparedStatementState::InternalSwap(ServerPreparedStatementState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sql_query_, lhs_arena,
      &other->_impl_.sql_query_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerPreparedStatementState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ExecutionProtos_2eproto_getter, &descriptor_table_ExecutionProtos_2eproto_once,
      file_level_metadata_ExecutionProtos_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace bit
}  // namespace exec
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::exec::bit::FragmentHandle*
Arena::CreateMaybeMessage< ::exec::bit::FragmentHandle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::bit::FragmentHandle >(arena);
}
template<> PROTOBUF_NOINLINE ::exec::bit::ServerPreparedStatementState*
Arena::CreateMaybeMessage< ::exec::bit::ServerPreparedStatementState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::exec::bit::ServerPreparedStatementState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
