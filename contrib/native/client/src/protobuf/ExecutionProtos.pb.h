// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExecutionProtos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ExecutionProtos_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ExecutionProtos_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "Coordination.pb.h"
#include "UserBitShared.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ExecutionProtos_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ExecutionProtos_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_ExecutionProtos_2eproto;
namespace exec {
namespace bit {
class FragmentHandle;
struct FragmentHandleDefaultTypeInternal;
extern FragmentHandleDefaultTypeInternal _FragmentHandle_default_instance_;
class ServerPreparedStatementState;
struct ServerPreparedStatementStateDefaultTypeInternal;
extern ServerPreparedStatementStateDefaultTypeInternal _ServerPreparedStatementState_default_instance_;
}  // namespace bit
}  // namespace exec
PROTOBUF_NAMESPACE_OPEN
template <>
::exec::bit::FragmentHandle* Arena::CreateMaybeMessage<::exec::bit::FragmentHandle>(Arena*);
template <>
::exec::bit::ServerPreparedStatementState* Arena::CreateMaybeMessage<::exec::bit::ServerPreparedStatementState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace exec {
namespace bit {

// ===================================================================


// -------------------------------------------------------------------

class FragmentHandle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exec.bit.FragmentHandle) */ {
 public:
  inline FragmentHandle() : FragmentHandle(nullptr) {}
  ~FragmentHandle() override;
  explicit PROTOBUF_CONSTEXPR FragmentHandle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FragmentHandle(const FragmentHandle& from);
  FragmentHandle(FragmentHandle&& from) noexcept
    : FragmentHandle() {
    *this = ::std::move(from);
  }

  inline FragmentHandle& operator=(const FragmentHandle& from) {
    CopyFrom(from);
    return *this;
  }
  inline FragmentHandle& operator=(FragmentHandle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FragmentHandle& default_instance() {
    return *internal_default_instance();
  }
  static inline const FragmentHandle* internal_default_instance() {
    return reinterpret_cast<const FragmentHandle*>(
               &_FragmentHandle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FragmentHandle& a, FragmentHandle& b) {
    a.Swap(&b);
  }
  inline void Swap(FragmentHandle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FragmentHandle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FragmentHandle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FragmentHandle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FragmentHandle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FragmentHandle& from) {
    FragmentHandle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FragmentHandle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "exec.bit.FragmentHandle";
  }
  protected:
  explicit FragmentHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryIdFieldNumber = 1,
    kParentQueryIdFieldNumber = 4,
    kMajorFragmentIdFieldNumber = 2,
    kMinorFragmentIdFieldNumber = 3,
  };
  // optional .exec.shared.QueryId query_id = 1;
  bool has_query_id() const;
  void clear_query_id() ;
  const ::exec::shared::QueryId& query_id() const;
  PROTOBUF_NODISCARD ::exec::shared::QueryId* release_query_id();
  ::exec::shared::QueryId* mutable_query_id();
  void set_allocated_query_id(::exec::shared::QueryId* query_id);
  private:
  const ::exec::shared::QueryId& _internal_query_id() const;
  ::exec::shared::QueryId* _internal_mutable_query_id();
  public:
  void unsafe_arena_set_allocated_query_id(
      ::exec::shared::QueryId* query_id);
  ::exec::shared::QueryId* unsafe_arena_release_query_id();
  // optional .exec.shared.QueryId parent_query_id = 4;
  bool has_parent_query_id() const;
  void clear_parent_query_id() ;
  const ::exec::shared::QueryId& parent_query_id() const;
  PROTOBUF_NODISCARD ::exec::shared::QueryId* release_parent_query_id();
  ::exec::shared::QueryId* mutable_parent_query_id();
  void set_allocated_parent_query_id(::exec::shared::QueryId* parent_query_id);
  private:
  const ::exec::shared::QueryId& _internal_parent_query_id() const;
  ::exec::shared::QueryId* _internal_mutable_parent_query_id();
  public:
  void unsafe_arena_set_allocated_parent_query_id(
      ::exec::shared::QueryId* parent_query_id);
  ::exec::shared::QueryId* unsafe_arena_release_parent_query_id();
  // optional int32 major_fragment_id = 2;
  bool has_major_fragment_id() const;
  void clear_major_fragment_id() ;
  ::int32_t major_fragment_id() const;
  void set_major_fragment_id(::int32_t value);

  private:
  ::int32_t _internal_major_fragment_id() const;
  void _internal_set_major_fragment_id(::int32_t value);

  public:
  // optional int32 minor_fragment_id = 3;
  bool has_minor_fragment_id() const;
  void clear_minor_fragment_id() ;
  ::int32_t minor_fragment_id() const;
  void set_minor_fragment_id(::int32_t value);

  private:
  ::int32_t _internal_minor_fragment_id() const;
  void _internal_set_minor_fragment_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:exec.bit.FragmentHandle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::exec::shared::QueryId* query_id_;
    ::exec::shared::QueryId* parent_query_id_;
    ::int32_t major_fragment_id_;
    ::int32_t minor_fragment_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ExecutionProtos_2eproto;
};// -------------------------------------------------------------------

class ServerPreparedStatementState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:exec.bit.ServerPreparedStatementState) */ {
 public:
  inline ServerPreparedStatementState() : ServerPreparedStatementState(nullptr) {}
  ~ServerPreparedStatementState() override;
  explicit PROTOBUF_CONSTEXPR ServerPreparedStatementState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerPreparedStatementState(const ServerPreparedStatementState& from);
  ServerPreparedStatementState(ServerPreparedStatementState&& from) noexcept
    : ServerPreparedStatementState() {
    *this = ::std::move(from);
  }

  inline ServerPreparedStatementState& operator=(const ServerPreparedStatementState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerPreparedStatementState& operator=(ServerPreparedStatementState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerPreparedStatementState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerPreparedStatementState* internal_default_instance() {
    return reinterpret_cast<const ServerPreparedStatementState*>(
               &_ServerPreparedStatementState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerPreparedStatementState& a, ServerPreparedStatementState& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerPreparedStatementState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerPreparedStatementState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerPreparedStatementState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerPreparedStatementState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerPreparedStatementState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerPreparedStatementState& from) {
    ServerPreparedStatementState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerPreparedStatementState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "exec.bit.ServerPreparedStatementState";
  }
  protected:
  explicit ServerPreparedStatementState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSqlQueryFieldNumber = 1,
  };
  // optional string sql_query = 1;
  bool has_sql_query() const;
  void clear_sql_query() ;
  const std::string& sql_query() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sql_query(Arg_&& arg, Args_... args);
  std::string* mutable_sql_query();
  PROTOBUF_NODISCARD std::string* release_sql_query();
  void set_allocated_sql_query(std::string* ptr);

  private:
  const std::string& _internal_sql_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sql_query(
      const std::string& value);
  std::string* _internal_mutable_sql_query();

  public:
  // @@protoc_insertion_point(class_scope:exec.bit.ServerPreparedStatementState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_query_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ExecutionProtos_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FragmentHandle

// optional .exec.shared.QueryId query_id = 1;
inline bool FragmentHandle::has_query_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.query_id_ != nullptr);
  return value;
}
inline const ::exec::shared::QueryId& FragmentHandle::_internal_query_id() const {
  const ::exec::shared::QueryId* p = _impl_.query_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::exec::shared::QueryId&>(
      ::exec::shared::_QueryId_default_instance_);
}
inline const ::exec::shared::QueryId& FragmentHandle::query_id() const {
  // @@protoc_insertion_point(field_get:exec.bit.FragmentHandle.query_id)
  return _internal_query_id();
}
inline void FragmentHandle::unsafe_arena_set_allocated_query_id(
    ::exec::shared::QueryId* query_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_id_);
  }
  _impl_.query_id_ = query_id;
  if (query_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:exec.bit.FragmentHandle.query_id)
}
inline ::exec::shared::QueryId* FragmentHandle::release_query_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::exec::shared::QueryId* temp = _impl_.query_id_;
  _impl_.query_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::exec::shared::QueryId* FragmentHandle::unsafe_arena_release_query_id() {
  // @@protoc_insertion_point(field_release:exec.bit.FragmentHandle.query_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::exec::shared::QueryId* temp = _impl_.query_id_;
  _impl_.query_id_ = nullptr;
  return temp;
}
inline ::exec::shared::QueryId* FragmentHandle::_internal_mutable_query_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.query_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::exec::shared::QueryId>(GetArenaForAllocation());
    _impl_.query_id_ = p;
  }
  return _impl_.query_id_;
}
inline ::exec::shared::QueryId* FragmentHandle::mutable_query_id() {
  ::exec::shared::QueryId* _msg = _internal_mutable_query_id();
  // @@protoc_insertion_point(field_mutable:exec.bit.FragmentHandle.query_id)
  return _msg;
}
inline void FragmentHandle::set_allocated_query_id(::exec::shared::QueryId* query_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_id_);
  }
  if (query_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_id));
    if (message_arena != submessage_arena) {
      query_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.query_id_ = query_id;
  // @@protoc_insertion_point(field_set_allocated:exec.bit.FragmentHandle.query_id)
}

// optional int32 major_fragment_id = 2;
inline bool FragmentHandle::has_major_fragment_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FragmentHandle::clear_major_fragment_id() {
  _impl_.major_fragment_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t FragmentHandle::major_fragment_id() const {
  // @@protoc_insertion_point(field_get:exec.bit.FragmentHandle.major_fragment_id)
  return _internal_major_fragment_id();
}
inline void FragmentHandle::set_major_fragment_id(::int32_t value) {
  _internal_set_major_fragment_id(value);
  // @@protoc_insertion_point(field_set:exec.bit.FragmentHandle.major_fragment_id)
}
inline ::int32_t FragmentHandle::_internal_major_fragment_id() const {
  return _impl_.major_fragment_id_;
}
inline void FragmentHandle::_internal_set_major_fragment_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.major_fragment_id_ = value;
}

// optional int32 minor_fragment_id = 3;
inline bool FragmentHandle::has_minor_fragment_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FragmentHandle::clear_minor_fragment_id() {
  _impl_.minor_fragment_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t FragmentHandle::minor_fragment_id() const {
  // @@protoc_insertion_point(field_get:exec.bit.FragmentHandle.minor_fragment_id)
  return _internal_minor_fragment_id();
}
inline void FragmentHandle::set_minor_fragment_id(::int32_t value) {
  _internal_set_minor_fragment_id(value);
  // @@protoc_insertion_point(field_set:exec.bit.FragmentHandle.minor_fragment_id)
}
inline ::int32_t FragmentHandle::_internal_minor_fragment_id() const {
  return _impl_.minor_fragment_id_;
}
inline void FragmentHandle::_internal_set_minor_fragment_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.minor_fragment_id_ = value;
}

// optional .exec.shared.QueryId parent_query_id = 4;
inline bool FragmentHandle::has_parent_query_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.parent_query_id_ != nullptr);
  return value;
}
inline const ::exec::shared::QueryId& FragmentHandle::_internal_parent_query_id() const {
  const ::exec::shared::QueryId* p = _impl_.parent_query_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::exec::shared::QueryId&>(
      ::exec::shared::_QueryId_default_instance_);
}
inline const ::exec::shared::QueryId& FragmentHandle::parent_query_id() const {
  // @@protoc_insertion_point(field_get:exec.bit.FragmentHandle.parent_query_id)
  return _internal_parent_query_id();
}
inline void FragmentHandle::unsafe_arena_set_allocated_parent_query_id(
    ::exec::shared::QueryId* parent_query_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parent_query_id_);
  }
  _impl_.parent_query_id_ = parent_query_id;
  if (parent_query_id) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:exec.bit.FragmentHandle.parent_query_id)
}
inline ::exec::shared::QueryId* FragmentHandle::release_parent_query_id() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::exec::shared::QueryId* temp = _impl_.parent_query_id_;
  _impl_.parent_query_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::exec::shared::QueryId* FragmentHandle::unsafe_arena_release_parent_query_id() {
  // @@protoc_insertion_point(field_release:exec.bit.FragmentHandle.parent_query_id)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::exec::shared::QueryId* temp = _impl_.parent_query_id_;
  _impl_.parent_query_id_ = nullptr;
  return temp;
}
inline ::exec::shared::QueryId* FragmentHandle::_internal_mutable_parent_query_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.parent_query_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::exec::shared::QueryId>(GetArenaForAllocation());
    _impl_.parent_query_id_ = p;
  }
  return _impl_.parent_query_id_;
}
inline ::exec::shared::QueryId* FragmentHandle::mutable_parent_query_id() {
  ::exec::shared::QueryId* _msg = _internal_mutable_parent_query_id();
  // @@protoc_insertion_point(field_mutable:exec.bit.FragmentHandle.parent_query_id)
  return _msg;
}
inline void FragmentHandle::set_allocated_parent_query_id(::exec::shared::QueryId* parent_query_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parent_query_id_);
  }
  if (parent_query_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_query_id));
    if (message_arena != submessage_arena) {
      parent_query_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent_query_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.parent_query_id_ = parent_query_id;
  // @@protoc_insertion_point(field_set_allocated:exec.bit.FragmentHandle.parent_query_id)
}

// -------------------------------------------------------------------

// ServerPreparedStatementState

// optional string sql_query = 1;
inline bool ServerPreparedStatementState::has_sql_query() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ServerPreparedStatementState::clear_sql_query() {
  _impl_.sql_query_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServerPreparedStatementState::sql_query() const {
  // @@protoc_insertion_point(field_get:exec.bit.ServerPreparedStatementState.sql_query)
  return _internal_sql_query();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerPreparedStatementState::set_sql_query(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sql_query_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:exec.bit.ServerPreparedStatementState.sql_query)
}
inline std::string* ServerPreparedStatementState::mutable_sql_query() {
  std::string* _s = _internal_mutable_sql_query();
  // @@protoc_insertion_point(field_mutable:exec.bit.ServerPreparedStatementState.sql_query)
  return _s;
}
inline const std::string& ServerPreparedStatementState::_internal_sql_query() const {
  return _impl_.sql_query_.Get();
}
inline void ServerPreparedStatementState::_internal_set_sql_query(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.sql_query_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerPreparedStatementState::_internal_mutable_sql_query() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sql_query_.Mutable( GetArenaForAllocation());
}
inline std::string* ServerPreparedStatementState::release_sql_query() {
  // @@protoc_insertion_point(field_release:exec.bit.ServerPreparedStatementState.sql_query)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.sql_query_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sql_query_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ServerPreparedStatementState::set_allocated_sql_query(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sql_query_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sql_query_.IsDefault()) {
          _impl_.sql_query_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:exec.bit.ServerPreparedStatementState.sql_query)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace bit
}  // namespace exec


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ExecutionProtos_2eproto_2epb_2eh
